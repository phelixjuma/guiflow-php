{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Rules",
  "description": "List of rules. Rules are an encapsulation for a list of actions to perform if the rule condition passes",
  "type": "array",
  "uniqueItems": true,
  "definitions": {
    "valueOrPath": {
      "oneOf": [
        {
          "title": "Textual Value",
          "type": "string"
        },
        {
          "title": "List of Textual Values",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "title": "List of Objects",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        {
          "title": "Value from Path",
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            }
          },
          "required": [
            "path"
          ],
          "additionalProperties": false
        },
        {
          "title": "Validation Data",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "data_path": {
                "type": "string"
              },
              "rules": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": ["data_path", "rules"],
            "additionalProperties": false
          }
        }
      ]
    },
    "valueOrInItemPath": {
      "oneOf": [
        {
          "title": "Textual Value",
          "type": "string"
        },
        {
          "title": "List of Textual Values",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "title": "Value from In Item Path",
          "type": "object",
          "properties": {
            "in_item_path": {
              "type": "string"
            }
          },
          "required": [
            "in_item_path"
          ],
          "additionalProperties": false
        }
      ]
    },
    "filterConditions": {
      "title": "Filter Criteria",
      "oneOf": [
        {
          "title": "Simple Condition",
          "type": "object",
          "properties": {
            "term": {
              "$ref": "#/definitions/valueOrPath"
            },
            "mode": {
              "type": "string",
              "enum": [
                "==",
                "!=",
                ">",
                ">=",
                "<",
                "<=",
                "in",
                "not in",
                "regex",
                "true",
                "false",
                "empty",
                "not empty",
                "startswith",
                "endswith",
                "similar_to",
                "gt",
                "gte",
                "lt",
                "lte",
                "contains",
                "not contains",
                "matches",
                "not matches",
                "no tin",
                "in list all",
                "not in list all",
                "in list any",
                "not in list any",
                "like"
              ]
            },
            "key": {
              "type": "string"
            },
            "similarity_threshold": {
              "type": "string"
            },
            "term_exclusion_pattern": {
              "type": "string"
            },
            "value_exclusion_pattern": {
              "type": "string"
            }
          },
          "required": [
            "term",
            "mode",
            "key",
            "similarity_threshold",
            "term_exclusion_pattern",
            "value_exclusion_pattern"
          ],
          "additionalProperties": false
        },
        {
          "title": "Nested Conditions",
          "type": "object",
          "properties": {
            "operator": {
              "type": "string",
              "enum": [
                "AND",
                "OR"
              ]
            },
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/filterConditions"
              }
            }
          },
          "required": [
            "operator",
            "conditions"
          ],
          "additionalProperties": false
        }
      ]
    },
    "promptContext": {
      "type": "object",
      "properties": {
        "spelling_corrections": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string"
              },
              "correction": {
                "type": "string"
              }
            },
            "required": ["pattern", "correction"],
            "additionalProperties": false
          }
        },
        "abbreviations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "abbreviation": {
                "type": "string"
              },
              "full_phrase": {
                "type": "string"
              }
            },
            "required": ["abbreviation", "full_phrase"],
            "additionalProperties": false
          }
        },
        "language_translations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "phrase": {
                "type": "string"
              },
              "translation": {
                "type": "string"
              }
            },
            "required": ["phrase", "translation"],
            "additionalProperties": false
          }
        },
        "stop_words_to_ignore": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "conditional_rules": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["if", "else if", "else"]
                },
                "condition": {
                  "type": "string"
                },
                "then": {
                  "type": "string"
                }
              },
              "required": ["type", "condition", "then"],
              "additionalProperties": false
            }
          }
        },
        "additional_instructions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "spelling_corrections", "abbreviations", "language_translations", "stop_words_to_ignore", "aliases",
        "conditional_rules", "additional_instructions"
      ],
      "additionalProperties": false
    },

    "actionBase": {
      "type": "object",
      "properties": {
        "stage": {
          "type": "string",
          "description": "Defines a unique identifier for this rule"
        },
        "description": {
          "type": "string",
          "description": "The description of what the arithmetic action does"
        },
        "dependencies": {
          "type": "array",
          "description": "A list of stages that this specific stage depends on ie its parents that must be executed first before it gets executed. Rule dependencies can only be actions and not other rules"
        },
        "skip": {
          "type": "string",
          "description": "Defines whether this rule should be skipped or not. If skipped, all the actions under this rule will be skipped",
          "enum": [
            "0",
            "1"
          ]
        }
      },
      "required": [
        "description",
        "stage",
        "dependencies",
        "skip"
      ]
    },
    "setAction": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "set"
          ]
        }
      },
      "required": ["action"]
    },
    "deletePathAction": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "delete"
          ]
        }
      },
      "required": ["action"]
    },
    "removePathAction": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "remove_path"
          ]
        }
      },
      "required": ["action"]
    },
    "arithmeticAction": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "add",
            "subtract",
            "multiply",
            "divide"
          ]
        }
      },
      "required": ["action"]
    },
    "functionAction": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "function"
          ]
        }
      },
      "required": ["action"]
    },
    "actionFunctionSharedParams": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "The (part of) data the function will operate on"
        },
        "newField": {
          "type": "string",
          "description": "The field to store the result of the function."
        },
        "strict": {
          "type": "string",
          "description": "Specifies whether the function execution should be strict.",
          "default": "1"
        },
        "condition": {
          "$ref": "#/definitions/Condition",
          "default": ""
        }
      },
      "required": [
        "path",
        "newField",
        "strict",
        "condition"
      ]
    },

    "userDefinedFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "user_defined_function"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "function_name": {
                  "type": "string"
                }
              },
              "required": [
                "function_name"
              ],
              "additionalProperties": true
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "systemDefinedFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "system_defined_function"
              ]
            },
            "args": {
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "function_name": {
                      "type": "string",
                      "enum": ["prompt_search"],
                      "const": "prompt_search"
                    },
                    "function_params": {
                      "properties": {
                        "search_phrase": {
                          "$ref": "#/definitions/valueOrPath"
                        },
                        "corpus": {
                          "$ref": "#/definitions/valueOrPath"
                        },
                        "corpus_search_key": {
                          "type": "string"
                        },
                        "corpus_id_key": {
                          "type": "string"
                        },
                        "meta_data_type": {
                          "type": "string"
                        },
                        "similarity_threshold": {
                          "type": "string"
                        },
                        "item_type": {
                          "type": "string"
                        },
                        "context": {
                          "$ref": "#/definitions/promptContext"
                        }
                      },
                      "required": [
                        "search_phrase", "corpus", "corpus_search_key", "corpus_id_key", "meta_data_type",
                        "similarity_threshold", "item_type", "context"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "function_name",
                    "function_params"
                  ],
                  "additionalProperties": false
                },
                {
                  "type": "object",
                  "properties": {
                    "function_name": {
                      "type": "string",
                      "enum": ["prompt_match"],
                      "const": "prompt_match"
                    },
                    "function_params": {
                      "properties": {
                        "data_to_match": {
                          "$ref": "#/definitions/valueOrPath"
                        },
                        "search_key": {
                          "type": "string"
                        },
                        "match_key": {
                          "type": "string"
                        },
                        "corpus": {
                          "$ref": "#/definitions/valueOrPath"
                        },
                        "corpus_search_key": {
                          "type": "string"
                        },
                        "corpus_id_key": {
                          "type": "string"
                        },
                        "meta_data_type": {
                          "type": "string"
                        },
                        "similarity_threshold": {
                          "type": "string"
                        },
                        "item_type": {
                          "type": "string"
                        },
                        "context": {
                          "$ref": "#/definitions/promptContext"
                        }
                      },
                      "required": [
                        "data_to_match", "search_key","match_key", "corpus", "corpus_search_key", "corpus_id_key",
                        "meta_data_type", "similarity_threshold", "item_type", "context"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "function_name",
                    "function_params"
                  ],
                  "additionalProperties": false
                },
                {
                  "type": "object",
                  "properties": {
                    "function_name": {
                      "type": "string",
                      "enum": ["prompt_classification"],
                      "const": "prompt_classification"
                    },
                    "function_params": {
                      "properties": {
                        "subject": {
                          "$ref": "#/definitions/valueOrPath"
                        },
                        "corpus": {
                          "$ref": "#/definitions/valueOrPath"
                        },
                        "item_type": {
                          "type": "string"
                        },
                        "context": {
                          "$ref": "#/definitions/promptContext"
                        }
                      },
                      "required": ["subject", "corpus", "item_type", "context"],
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "function_name",
                    "function_params"
                  ],
                  "additionalProperties": false
                }
              ]
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "transformFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "transform"
              ]
            },
            "args": {
              "type": "object",
              "oneOf": [
                {
                  "title": "String Replace",
                  "properties": {
                    "transformer": {
                      "type": "string",
                      "enum": [
                        "str_replace"
                      ]
                    },
                    "transformer_args": {
                      "properties": {
                        "search": {
                          "type": "string"
                        },
                        "replacement": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "search",
                        "replacement"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "title": "Regex Replace",
                  "properties": {
                    "transformer": {
                      "type": "string",
                      "enum": [
                        "preg_replace"
                      ]
                    },
                    "transformer_args": {
                      "properties": {
                        "pattern": {
                          "type": "string"
                        },
                        "replacement": {
                          "type": "string"
                        },
                        "add_spacer": {
                          "type": "string",
                          "enum": [
                            "1",
                            "0"
                          ],
                          "default": "1"
                        },
                        "is_case_sensitive": {
                          "type": "string",
                          "enum": [
                            "1",
                            "0"
                          ],
                          "default": "0"
                        }
                      },
                      "required": [
                        "pattern",
                        "replacement",
                        "add_spacer",
                        "is_case_sensitive"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "title": "Explode",
                  "properties": {
                    "transformer": {
                      "type": "string",
                      "enum": [
                        "explode"
                      ]
                    },
                    "transformer_args": {
                      "properties": {
                        "separator": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "separator"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "title": "String to Date Time",
                  "properties": {
                    "transformer": {
                      "type": "string",
                      "enum": [
                        "string_to_date_time"
                      ]
                    },
                    "transformer_args": {
                      "properties": {
                        "format": {
                          "type": "string"
                        },
                        "pre_modifier": {
                          "type": "string"
                        },
                        "post_modifier": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "format",
                        "pre_modifier",
                        "post_modifier"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "title": "Dictionary Mapper",
                  "properties": {
                    "transformer": {
                      "type": "string",
                      "enum": [
                        "dictionary_mapper"
                      ]
                    },
                    "transformer_args": {
                      "properties": {
                        "mappings": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "mappings"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "title": "Regex Mapper",
                  "properties": {
                    "transformer": {
                      "type": "string",
                      "enum": [
                        "regex_mapper"
                      ]
                    },
                    "transformer_args": {
                      "properties": {
                        "mappings": {
                          "anyOf": [
                            {
                              "title": "Key-Value Mapping",
                              "description": "Key-Value where key represents the search pattern and value represents the replacement",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            {
                              "title": "List of Patterns and Replacements",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "pattern": {
                                    "type": "string"
                                  },
                                  "replacement": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "pattern",
                                  "replacement"
                                ],
                                "additionalProperties": false
                              }
                            }
                          ]
                        },
                        "is_case_sensitive": {
                          "type": "string",
                          "enum": [
                            "1",
                            "0"
                          ],
                          "default": "0"
                        }
                      },
                      "required": [
                        "mappings",
                        "is_case_sensitive"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "unevaluatedProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "filterFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "filter"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "filter_criteria": {
                  "$ref": "#/definitions/filterConditions"
                }
              },
              "required": [
                "filter_criteria"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "splitFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "split"
              ]
            },
            "args": {
              "title": "Split or group data",
              "type": "object",
              "properties": {
                "method": {
                  "description": "The method of splitting",
                  "type": "string",
                  "enum": ["", "running_total"]
                },
                "split_path": {
                  "description": "The path to the data to be split.",
                  "type": "string"
                },
                "criteria_path": {
                  "description": "The path that determines the criteria for splitting. Akin to 'groupBy'",
                  "type": "string"
                },
                "criteria": {
                  "$ref": "#/definitions/Condition"
                },
                "running_total_limit": {
                  "description": "The max totals per group when doing group by running totals",
                  "type": "string"
                }
              },
              "required": [
                "split_path",
                "criteria_path"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "mergeFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "merge"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "left": {
                  "description": "The left-side data",
                  "oneOf": [
                    {
                      "type": "array"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "path"
                      ],
                      "additionalProperties": false
                    }
                  ]
                },
                "right": {
                  "description": "The right-side data",
                  "oneOf": [
                    {
                      "type": "array"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "path"
                      ],
                      "additionalProperties": false
                    }
                  ]
                },
                "join": {
                  "description": "The criteria to use for joining",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "inner",
                        "left",
                        "right"
                      ]
                    },
                    "on": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "type",
                    "on"
                  ],
                  "additionalProperties": false
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "group_by": {
                  "description": "List of fields to group the data by",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "left",
                "right",
                "join",
                "fields",
                "group_by"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "setFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "set"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "The data path where the value is to be set."
                },
                "value": {
                  "type": [
                    "string",
                    "array",
                    "object",
                    "null"
                  ],
                  "description": "The value to set. Optional if using valueFromField."
                },
                "valueFromField": {
                  "type": "string",
                  "description": "The JSON path from which to copy a value. Optional if using value."
                },
                "valueMapping": {
                  "type": [
                    "string",
                    "object",
                    "null"
                  ],
                  "description": "Maps values from valueFromField to new values. Used only with valueFromField.",
                  "default": ""
                },
                "conditionalValue": {
                  "type": [
                    "array"
                  ],
                  "items": {
                    "type": "object",
                    "properties": {
                      "condition": {
                        "$ref": "#/definitions/Condition"
                      },
                      "value": {
                        "type": [
                          "string",
                          "array",
                          "object",
                          "null"
                        ],
                        "description": "The value to set if the condition is true."
                      },
                      "valueFromField": {
                        "type": "string",
                        "description": "The field from which to derive the value if the condition is true. Optional."
                      },
                      "use_data_as_path_value": {
                        "type": "string",
                        "enum": ["1","0"],
                        "default": "0"
                      }
                    },
                    "required": [
                      "condition",
                      "value",
                      "valueFromField",
                      "use_data_as_path_value"
                    ]
                  },
                  "description": "Sets the value based on a condition."
                },
                "newField": {
                  "type": "string",
                  "description": "The new field to create or update with the set value."
                }
              },
              "required": [
                "path",
                "value",
                "valueFromField",
                "valueMapping",
                "conditionalValue",
                "newField"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "joinFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "join"
              ]
            },
            "args": {
              "description": "Used to concatenate lists of data. Different from merge in that it simply appends one list to another",
              "type": "object",
              "properties": {
                "join_paths": {
                  "description": "Paths to the subsets of data to be concatenated",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "criteria": {
                  "description": "The conditions to be met for the joining to be done. Two datasets are only merged if both meet the criteria",
                  "$ref": "#/definitions/Condition"
                }
              },
              "required": [
                "join_paths",
                "criteria"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "reducerFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "reducer"
              ]
            },
            "args": {
              "description": "Gets one value from a list of data, based on the specified reducer function",
              "oneOf": [
                {
                  "title": "Min or Max",
                  "description": "Get the min or max value from the data",
                  "properties": {
                    "reducer": {
                      "type": "string",
                      "enum": [
                        "min",
                        "max"
                      ]
                    }
                  },
                  "required": [
                    "reducer"
                  ],
                  "additionalProperties": false
                },
                {
                  "title": "Modal or Priority Reducer",
                  "description": "Modal returns the most common value and if there is a tie, it uses the priority list to break the tie. Priority reducer picks the data with the highest priority",
                  "properties": {
                    "reducer": {
                      "type": "string",
                      "enum": [
                        "modal_value",
                        "priority_reducer"
                      ]
                    },
                    "priority": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "default": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "reducer",
                    "priority",
                    "default"
                  ],
                  "additionalProperties": false
                },
                {
                  "title": "Get item at index",
                  "description": "Returns a specific item at a given index in the list",
                  "properties": {
                    "reducer": {
                      "type": "string",
                      "enum": [
                        "get_item_at_index"
                      ]
                    },
                    "index": {
                      "$ref": "#/definitions/valueOrPath"
                    }
                  },
                  "required": [
                    "reducer",
                    "index"
                  ],
                  "additionalProperties": false
                }
              ]
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "sortMultiByKeyFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "sort_multi_by_key"
              ]
            },
            "args": {
              "description": "Sort a list of objects based on a specified object key",
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "order": {
                  "type": "string",
                  "enum": [
                    "asc",
                    "desc"
                  ]
                }
              },
              "required": [
                "key",
                "order"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "formatDateFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "format_date"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "format": {
                  "type": "string"
                }
              },
              "required": [
                "format"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "absoluteValueFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "absolute_value"
              ]
            },
            "args": {
              "type": "string"
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "fuzzyExtractOneFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "fuzzy_extract_one"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "choices": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "min_score": {
                  "type": "string"
                },
                "default_choice": {
                  "type": "string"
                },
                "fuzzy_method": {
                  "type": "string",
                  "enum": [
                    "ratio",
                    "partialRatio",
                    "weightedRatio",
                    "tokenSetRatio",
                    "tokenSortRatio",
                    "tokenSetPartialRatio",
                    "tokenSortPartialRatio"
                  ],
                  "default": "tokenSetRatio"
                }
              },
              "required": [
                "choices",
                "min_score",
                "default_choice",
                "fuzzy_method"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "fuzzyExtractNFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "fuzzy_extract_n"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "query": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                },
                "choices": {
                  "oneOf": [
                    {
                      "title": "Get data from path",
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "title": "Set the choices data",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                },
                "search_key": {
                  "type": "string"
                },
                "n": {
                  "type": "string"
                },
                "order": {
                  "type": "string",
                  "enum": [
                    "asc",
                    "desc"
                  ]
                },
                "fuzzy_method": {
                  "type": "string",
                  "enum": [
                    "ratio",
                    "partialRatio",
                    "weightedRatio",
                    "tokenSetRatio",
                    "tokenSortRatio",
                    "tokenSetPartialRatio",
                    "tokenSortPartialRatio"
                  ],
                  "default": "tokenSetRatio"
                },
                "stop_words": {
                  "$ref": "#/definitions/valueOrPath"
                }
              },
              "required": [
                "query",
                "choices",
                "search_key",
                "n",
                "order",
                "fuzzy_method",
                "stop_words"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "fuzzySearchFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "fuzzy_search"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "corpus": {
                  "$ref": "#/definitions/valueOrPath"
                },
                "corpus_search_key": {
                  "type": "string"
                },
                "corpus_id_key": {
                  "type": "string"
                },
                "master_data_type": {
                  "type": "string"
                },
                "similarity_threshold": {
                  "type": "string"
                },
                "number_of_matches": {
                  "type": "string"
                },
                "scorer": {
                  "type": "string",
                  "enum": ["ratio", "partialRatio", "weightedRatio", "tokenSetRatio", "tokenSortRatio", "tokenSetPartialRatio", "tokenSortPartialRatio"],
                  "default": "tokenSetRatio"
                },
                "stop_words": {
                  "$ref": "#/definitions/valueOrPath"
                }
              },
              "required": ["corpus", "corpus_search_key", "corpus_id_key", "master_data_type", "similarity_threshold", "number_of_matches", "scorer", "stop_words"],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "fuzzyMatchFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "fuzzy_match"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "search_key": {
                  "type": "string"
                },
                "matching_key": {
                  "type": "string"
                },
                "corpus": {
                  "$ref": "#/definitions/valueOrPath"
                },
                "corpus_search_key": {
                  "type": "string"
                },
                "corpus_id_key": {
                  "type": "string"
                },
                "master_data_type": {
                  "type": "string"
                },
                "similarity_threshold": {
                  "type": "string"
                },
                "number_of_matches": {
                  "type": "string"
                },
                "scorer": {
                  "type": "string",
                  "enum": ["ratio", "partialRatio", "weightedRatio", "tokenSetRatio", "tokenSortRatio", "tokenSetPartialRatio", "tokenSortPartialRatio"],
                  "default": "tokenSetRatio"
                },
                "stop_words": {
                  "$ref": "#/definitions/valueOrPath"
                }
              },
              "required": ["search_key", "matching_key","corpus", "corpus_search_key", "corpus_id_key", "master_data_type", "similarity_threshold", "number_of_matches", "scorer", "stop_words"],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "regexExtractFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "regex_extract"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "pattern": {
                  "type": "string"
                },
                "capture_group_number": {
                  "description": "The number, from 1, of the capture group for backreference",
                  "type": "string",
                  "default": "0"
                },
                "is_case_sensitive": {
                  "type": "string",
                  "enum": [
                    "1",
                    "0"
                  ],
                  "default": "0"
                },
                "return_subject_on_null": {
                  "description": "If no search matches the pattern, whether or not to return the whole data",
                  "type": "string",
                  "enum": [
                    "1",
                    "0"
                  ],
                  "default": "1"
                }
              },
              "required": [
                "pattern",
                "capture_group_number",
                "is_case_sensitive",
                "return_subject_on_null"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "appendFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "append"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "data_to_append": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/valueOrPath"
                  }
                },
                "separator": {
                  "type": "string"
                },
                "use_data_as_path_value": {
                  "description": "Can be used when condition is set. Should be true when the condition specifies a path that should be referenced in the data",
                  "type": "string",
                  "enum": [
                    "1",
                    "0"
                  ],
                  "default": "1"
                },
                "value_key": {
                  "description": "Used when appending data within a list of objects. The key specifies which object key the final result should be set in",
                  "type": "string"
                }
              },
              "required": [
                "data_to_append",
                "separator",
                "use_data_as_path_value",
                "value_key"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "prependFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "prepend"
              ]
            },
            "args": {
              "unevaluatedProperties": false,
              "type": "object",
              "properties": {
                "data_to_prepend": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/valueOrPath"
                  }
                },
                "separator": {
                  "type": "string"
                },
                "use_data_as_path_value": {
                  "description": "Can be used when condition is set. Should be true when the condition specifies a path that should be referenced in the data",
                  "type": "string",
                  "enum": [
                    "1",
                    "0"
                  ],
                  "default": "1"
                },
                "value_key": {
                  "description": "Used when appending data within a list of objects. The key specifies which object key the final result should be set in",
                  "type": "string"
                }
              },
              "required": [
                "data_to_prepend",
                "separator",
                "use_data_as_path_value",
                "value_key"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ]
    },
    "concatFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "concat"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "data_to_concat": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/valueOrPath"
                  }
                },
                "separator": {
                  "type": "string"
                },
                "enclosure": {
                  "type": "string",
                  "enum": [
                    "",
                    "brackets",
                    "square brackets",
                    "curly brackets",
                    "forward strokes",
                    "backward strokes",
                    "double quotes",
                    "single quotes"
                  ]
                }
              },
              "required": [
                "data_to_concat",
                "separator",
                "enclosure"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "concatMultiArrayAssocFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "concat_multi_array_assoc"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "newField": {
                  "description": "The field where concatenated string should be set",
                  "type": "string"
                },
                "separator": {
                  "type": "string"
                },
                "enclosure": {
                  "type": "string",
                  "enum": [
                    "",
                    "brackets",
                    "square brackets",
                    "curly brackets",
                    "forward strokes",
                    "backward strokes",
                    "double quotes",
                    "single quotes"
                  ]
                }
              },
              "required": [
                "fields",
                "newField",
                "separator",
                "enclosure"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "customPregReplaceFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "custom_preg_replace"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "pattern": {
                  "type": "string"
                },
                "replacement": {
                  "description": "This accepts both string and capture group numbers prepended with the dollar sign eg $1, $2...",
                  "type": "string"
                }
              },
              "required": [
                "pattern",
                "replacement"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "regexMapperMultipleFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "regex_mapper_multiple"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "mappers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "description": {
                        "description": "Explains what this mapper does",
                        "type": "string"
                      },
                      "order": {
                        "description": "Use this for sorting which mapper is to be executed before which ones",
                        "type": "string"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "pattern": {
                            "type": "string"
                          },
                          "modifiers": {
                            "type": "string"
                          },
                          "replacements": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "pattern": {
                                  "type": "string"
                                },
                                "replacement": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "pattern",
                                "replacement"
                              ],
                              "additionalProperties": false
                            }
                          }
                        },
                        "required": [
                          "pattern",
                          "modifiers",
                          "replacements"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "description",
                      "order",
                      "data"
                    ],
                    "additionalProperties": false
                  }
                },
                "sort_by_order": {
                  "type": "string",
                  "enum": [
                    "1",
                    "0"
                  ]
                }
              },
              "required": [
                "mappers",
                "sort_by_order"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "removeRepeatedWordsFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "remove_repeated_words"
              ]
            },
            "args": {
              "type": "string"
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "assocArraySumIfFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "assoc_array_sum_if"
              ]
            },
            "args": {
              "description": "Conditionally summate specific colum in a list of objects if the object mets the set criteria",
              "type": "object",
              "properties": {
                "sum_field": {
                  "type": "string",
                  "description": "The key/field that is to be summated"
                },
                "condition": {
                  "$ref": "#/definitions/Condition"
                }
              },
              "required": [
                "sum_field",
                "condition"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "getFromObjectFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "get_from_object"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "key": {
                  "$ref": "#/definitions/valueOrPath"
                }
              },
              "required": [
                "key"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "flattenObjectsFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "flatten_objects"
              ]
            },
            "args": {
              "description": "Flattens an object. Child objects are removed and their values set on the parent using parent.child path notation",
              "type": "object",
              "properties": {
                "key_prefix": {
                  "description": "A prefix for the flattened keys. Optional",
                  "type": "string"
                }
              },
              "required": [
                "key_prefix"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "expandListsFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "expand_lists"
              ]
            },
            "args": {
              "description": "Expands complex nested array into a simple one-level array of objects. Nested objects are brought to the parent level. Nested arrays are expanded and split eg ['preferences' => ['colors' => ['blue', 'green']]] becomes [['preferences.colors' => 'blue'],['preferences.colors' => 'green']]",
              "type": "object",
              "properties": {
                "key_prefix": {
                  "description": "A prefix for the flattened keys. Optional",
                  "type": "string"
                }
              },
              "required": [
                "key_prefix"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "flattenAndExpandFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "flatten_and_expand"
              ]
            },
            "args": {
              "description": "This first flattens the data using the flatten_objects function and then expands the list using the expand_lists function",
              "type": "object",
              "properties": {
                "key_prefix": {
                  "description": "A prefix for the flattened keys. Optional",
                  "type": "string"
                }
              },
              "required": [
                "key_prefix"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "renameObjectKeysFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "rename_object_keys"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "key_map": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "key_map"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "dateAddSubtractDaysFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "date_add_subtract_days"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "days": {
                  "$ref": "#/definitions/valueOrPath"
                },
                "operator": {
                  "type": "string",
                  "enum": [
                    "add",
                    "sub"
                  ]
                },
                "format": {
                  "type": "string"
                }
              },
              "required": [
                "days",
                "operator",
                "format"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "dateFormatFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "date_format"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "format": {
                  "type": "string"
                }
              },
              "required": [
                "format"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "dateDiffFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "date_diff"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "end_date": {
                  "$ref": "#/definitions/valueOrPath"
                },
                "period": {
                  "description": "The unit for the date difference: years (y), months (m), days (d), hours (h), minutes (i), seconds (s)",
                  "type": "string",
                  "enum": [
                    "y",
                    "m",
                    "d",
                    "h",
                    "i",
                    "s"
                  ]
                }
              },
              "required": [
                "end_date",
                "period"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "convertUnitFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "convert_unit"
              ]
            },
            "args": {
              "description": "Convert quantity from one unit to another. Must take in a valid conversion table as the data. A valid conversion table is a list of objects with object keys: to (unit to convert to), from (unit to convert from), factor (the conversion multiple between the from and to units). Example: {'from': 'cm', 'to': 'm', 'factor': 0.01}",
              "type": "object",
              "properties": {
                "quantity": {
                  "type": "string"
                },
                "from_unit": {
                  "type": "string"
                },
                "to_unit": {
                  "type": "string"
                },
                "invert_factor": {
                  "description": "Whether or not the factor in conversion table should be inverted or not",
                  "type": "string",
                  "enum": [
                    "1",
                    "0"
                  ]
                }
              },
              "required": [
                "quantity",
                "from_unit",
                "to_unit",
                "invert_factor"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "convertUnitMultiFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "convert_unit_multi"
              ]
            },
            "args": {
              "description": "Convert units similar to convert_unit function but working on a list of objects data.",
              "type": "object",
              "properties": {
                "items": {
                  "description": "The list of objects data where each object will have the quantity converted",
                  "oneOf": [
                    {
                      "title": "Get data from path",
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "title": "Set the data",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                },
                "conversion_table": {
                  "oneOf": [
                    {
                      "title": "Get data from path",
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "title": "Set the data",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                },
                "quantity": {
                  "$ref": "#/definitions/valueOrInItemPath"
                },
                "from_unit": {
                  "$ref": "#/definitions/valueOrInItemPath"
                },
                "to_unit": {
                  "$ref": "#/definitions/valueOrInItemPath"
                },
                "invert_factor": {
                  "description": "Whether or not the factor in conversion table should be inverted or not",
                  "type": "string",
                  "enum": [
                    "1",
                    "0"
                  ],
                  "default": "0"
                },
                "output_path": {
                  "description": "The field path where the conversion results will be stored",
                  "type": "string"
                }
              },
              "required": [
                "items",
                "conversion_table",
                "quantity",
                "from_unit",
                "to_unit",
                "invert_factor",
                "output_path"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "getMetricConversionTableFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "get_metric_conversion_table"
              ]
            },
            "args": {
              "type": "string"
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "modelMappingFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "model_mapping"
              ]
            },
            "args": {
              "description": "Convert from one data model to another",
              "type": "object",
              "properties": {
                "model_mapping": {
                  "description": "The keys define the source data paths while the values define the mapped (new) data paths",
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "Key-Value with Key as new data path and value as origin data path",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "array",
                      "description": "A List showing from and to data paths",
                      "items": {
                        "type": "object",
                        "properties": {
                          "from_path": {
                            "type": "string"
                          },
                          "to_path": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "from_path",
                          "to_path"
                        ],
                        "additionalProperties": false
                      }
                    }
                  ]
                },
                "inverted": {
                  "description": "If inverted is yes, the mapping is done in the opposite direction ie model mapping keys will be the new data while values will be source data paths",
                  "type": "string",
                  "enum": [
                    "1",
                    "0"
                  ]
                }
              },
              "required": [
                "model_mapping",
                "inverted"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "makeObjectListUniqueFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "make_object_list_unique"
              ]
            },
            "args": {
              "description": "Returns a list with all duplicate objects removed to ensure objects are unique",
              "type": "object",
              "properties": {
                "unique_key_paths": {
                  "description": "Key/field to check uniqueness on",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "rank_key_path": {
                  "description": "Key/field for ranking to choose on which copy of the duplicated objects to retain",
                  "type": "string"
                },
                "rank_order": {
                  "description": "The ranking ordr for the rank_key_path",
                  "type": "string",
                  "enum": [
                    "desc",
                    "asc"
                  ],
                  "default": "desc"
                }
              },
              "required": [
                "unique_key_paths",
                "rank_key_path",
                "rank_order"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "duplicateListItemFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "duplicate_list_item"
              ]
            },
            "args": {
              "description": "Duplicate specific objects within a list. Has an option to modify the duplicated copy",
              "type": "object",
              "properties": {
                "replacement_key": {
                  "description": "The search key used to match the duplicated object to its replacement data",
                  "type": "string"
                },
                "replacement_data": {
                  "description": "The replacement data. For each replacement, add a new property defining the replacement_key name used for search",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "replacements": {
                        "description": "Keys/properties define the field to replace and the property value defines the value to replace onto that field",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": true,
                    "maxProperties": 2
                  }
                }
              },
              "required": [
                "replacement_key",
                "replacement_data"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "getRandomStringFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "get_random_string"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "length": {
                  "type": "string"
                },
                "alphabet": {
                  "type": "string"
                }
              },
              "required": [
                "length",
                "alphabet"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "basicArithmeticFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "basic_arithmetic"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "operator": {
                  "type": "string",
                  "enum": [
                    "add",
                    "subtract",
                    "multiply",
                    "divide",
                    "similarity_score"
                  ]
                },
                "operands": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/valueOrPath"
                  }
                },
                "default_value": {
                  "$ref": "#/definitions/valueOrPath"
                },
                "modulo_handler": {
                  "type": "string",
                  "enum": [
                    "ceil",
                    "floor",
                    "round"
                  ]
                },
                "decimal_places": {
                  "type": "string"
                }
              },
              "required": [
                "operator",
                "operands",
                "default_value",
                "modulo_handler",
                "decimal_places"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "lengthFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "length"
              ]
            },
            "args": {
              "type": "string"
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "correctDateFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "correct_date"
              ]
            },
            "args": {
              "type": "string"
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "parseTemplateFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "parse_template"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "template": {
                  "description": "Template text where variables are denoted as {{variable_name}}",
                  "type": "string"
                },
                "config": {
                  "description": "Configure how the template variables in the template should matched. Number of configs should equal the number of template variables in the regex template",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "non_greedy": {
                        "type": "string",
                        "enum": [
                          "1",
                          "0"
                        ],
                        "default": "1"
                      },
                      "only_numbers": {
                        "type": "string",
                        "enum": [
                          "1",
                          "0"
                        ],
                        "default": "0"
                      },
                      "only_letters": {
                        "type": "string",
                        "enum": [
                          "1",
                          "0"
                        ],
                        "default": "0"
                      }
                    },
                    "required": [
                      "non_greedy",
                      "only_numbers",
                      "only_letters"
                    ],
                    "additionalProperties": false
                  }
                },
                "modifiers": {
                  "type": "string"
                }
              },
              "required": [
                "template",
                "config",
                "modifiers"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "patternBasedStemSpellCorrectionsFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "pattern_based_stem_spell_corrections"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "search_key": {
                  "type": "string"
                },
                "corpus_list": {
                  "$ref": "#/definitions/valueOrPath"
                },
                "corpus_key": {
                  "type": "string"
                },
                "search_stemming_patterns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "corpus_stemming_patterns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "similarity_threshold": {
                  "type": "string"
                },
                "stop_words": {
                  "$ref": "#/definitions/valueOrPath"
                }
              },
              "required": [
                "search_key",
                "corpus_list",
                "corpus_key",
                "search_stemming_patterns",
                "corpus_stemming_patterns",
                "similarity_threshold",
                "stop_words"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "validateAndCorrectQuantityAndPricesFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "validate_and_correct_quantity_and_prices"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "quantity_path": {
                  "type": "string"
                },
                "unit_price_path": {
                  "type": "string"
                },
                "total_price_path": {
                  "type": "string"
                }
              },
              "required": [
                "quantity_path",
                "unit_price_path",
                "total_price_path"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "validateDataStructureFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "validate_data_structure"
              ]
            },
            "args": {
              "type": "object",
              "properties": {
                "validations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_path": {
                        "type": "string"
                      },
                      "rules": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": ["data_path", "rules"],
                    "additionalProperties": false
                  }
                },
                "verbose": {
                  "type": "string",
                  "enum": ["1", "0"],
                  "default": "1"
                }
              },
              "required": [
                "validations",
                "verbose"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "platformFunctionsFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "strtolower", "strtoupper", "trim", "ucwords","strlen", "explode", "implode", "nl2br", "number_format",
                "levenshtein", "similar_text", "soundex","str_contains", "str_ireplace", "str_replace", "substr", "strtr",
                "strtotime",
                "sort",
                "round", "floor", "ceil", "abs", "exp", "max", "min", "pow", "sqrt", "array_sum","count", "sizeof",
                "json_encode", "json_decode",
                "intval", "floatval",
                "preg_match", "preg_replace", "date_default_timezone_set"
              ]
            },
            "args": {
              "type": "string"
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "mapFunctionArgs": {
      "allOf": [
        {
          "$ref": "#/definitions/actionFunctionSharedParams"
        },
        {
          "properties": {
            "function": {
              "enum": [
                "map", "map_parallel"
              ]
            },
            "args": {
              "$ref": "#/definitions/mapFunctionsList"
            }
          },
          "required": [
            "function",
            "args"
          ]
        }
      ],
      "unevaluatedProperties": false
    },

    "Condition": {
      "title": "Condition",
      "oneOf": [
        {
          "title": "Always True Condition",
          "type": "string",
          "const": "always"
        },
        {
          "title": "No Condition",
          "type": "string",
          "const": ""
        },
        {
          "title": "Existence Checker Condition",
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "operator": {
              "type": "string",
              "enum": [
                "exists",
                "not exists"
              ]
            }
          },
          "required": [
            "path",
            "operator"
          ],
          "additionalProperties": false
        },
        {
          "title": "True/False Condition",
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "operator": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          "required": [
            "path",
            "operator"
          ],
          "additionalProperties": false
        },
        {
          "title": "Simple Condition",
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "operator": {
              "type": "string",
              "enum": [
                "==",
                "!=",
                "gt",
                "gte",
                "lt",
                "lte",
                "contains",
                "not contains",
                "matches",
                "not matches",
                "regex",
                "in",
                "not in",
                "in list all",
                "not in list all",
                "in list any",
                "not in list any",
                "like",
                "validates",
                "not validates"
              ]
            },
            "value": {
              "$ref": "#/definitions/valueOrPath"
            }
          },
          "required": [
            "path",
            "operator",
            "value"
          ],
          "additionalProperties": false
        },
        {
          "title": "Simple Condition for Similarity",
          "description": "Uses Fuzzy string matching to calculate similarity between strings",
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "operator": {
              "type": "string",
              "enum": [
                "similar_to"
              ]
            },
            "value": {
              "$ref": "#/definitions/valueOrPath"
            },
            "similarity_threshold": {
              "description": "Minimum Fuzzy Ratio between 0-100 (similarity score) for condition to be true",
              "type": "string"
            },
            "tokenize_similarity": {
              "type": "string",
              "enum": [
                "1",
                "0"
              ],
              "default": "0"
            }
          },
          "required": [
            "path",
            "operator",
            "value",
            "similarity_threshold",
            "tokenize_similarity"
          ],
          "additionalProperties": false
        },
        {
          "title": "Nested Conditions",
          "type": "object",
          "properties": {
            "operator": {
              "type": "string",
              "enum": [
                "AND",
                "OR"
              ]
            },
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Condition"
              }
            }
          },
          "required": [
            "operator",
            "conditions"
          ],
          "additionalProperties": false
        },
        {
          "title": "Join Condition",
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "operator": {
              "type": "string",
              "not": {
                "enum": [
                  "exists",
                  "not exists"
                ]
              }
            }
          },
          "required": [
            "path",
            "operator"
          ],
          "additionalProperties": false
        },
        {
          "title": "Condition for Set Function (no path)",
          "type": "object",
          "oneOf": [
            {
              "title": "Simple",
              "properties": {
                "operator": {
                  "type": "string",
                  "enum": [
                    "==",
                    "!=",
                    "gt",
                    "gte",
                    "lt",
                    "lte",
                    "contains",
                    "not contains",
                    "matches",
                    "not matches",
                    "regex",
                    "in",
                    "not in",
                    "in list all",
                    "not in list all",
                    "in list any",
                    "not in list any",
                    "like",
                    "similar_to"
                  ]
                },
                "value": {
                  "$ref": "#/definitions/valueOrPath"
                }
              },
              "required": [
                "operator",
                "value"
              ],
              "additionalProperties": false
            },
            {
              "title": "Existence Checker",
              "type": "object",
              "properties": {
                "operator": {
                  "type": "string",
                  "enum": [
                    "exists",
                    "not exists"
                  ]
                }
              },
              "required": [
                "operator"
              ],
              "additionalProperties": false
            },
            {
              "title": "True/False",
              "type": "object",
              "properties": {
                "operator": {
                  "type": "string",
                  "enum": [
                    "true",
                    "false"
                  ]
                }
              },
              "required": [
                "operator"
              ],
              "additionalProperties": false
            }
          ]
        }
      ]
    },

    "Action_Arithmetic": {
      "title": "Arithmetic Action",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/arithmeticAction"
        },
        {
          "properties": {
            "params": {
              "description": "Action Parameters",
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "The (part of) data the function will operate on"
                },
                "value": {
                  "type": [
                    "string",
                    "array",
                    "object"
                  ],
                  "description": "The value to be used as the argument for the operation."
                },
                "valueFromField": {
                  "type": "string",
                  "description": "The field from which to derive the value for the operation."
                },
                "newField": {
                  "type": "string",
                  "description": "The field to store the result of the operation."
                }
              },
              "required": [
                "path",
                "value",
                "valueFromField",
                "newField"
              ],
              "unevaluatedProperties": false
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Deletion_DeletePathValue": {
      "title": "Delete Path Value Action",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/deletePathAction"
        },
        {
          "properties": {
            "params": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "The path to be deleted."
                }
              },
              "required": [
                "path"
              ],
              "additionalProperties": false
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Deletion_RemovePath": {
      "title": "Remove Path Action",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/removePathAction"
        },
        {
          "properties": {
            "params": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "The path to be removed."
                }
              },
              "required": [
                "path"
              ],
              "additionalProperties": false
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Set": {
      "title": "Set Action",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/setAction"
        },
        {
          "properties": {
            "params": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "The data path where the value is to be set."
                },
                "value": {
                  "type": [
                    "string",
                    "array",
                    "object",
                    "null"
                  ],
                  "description": "The value to set. Optional if using valueFromField."
                },
                "valueFromField": {
                  "type": "string",
                  "description": "The JSON path from which to copy a value. Optional if using value."
                },
                "valueMapping": {
                  "type": [
                    "string",
                    "object",
                    "null"
                  ],
                  "description": "Maps values from valueFromField to new values. Used only with valueFromField.",
                  "default": ""
                },
                "conditionalValue": {
                  "type": [
                    "array"
                  ],
                  "items": {
                    "type": "object",
                    "properties": {
                      "condition": {
                        "$ref": "#/definitions/Condition"
                      },
                      "value": {
                        "type": [
                          "string",
                          "array",
                          "object",
                          "null"
                        ],
                        "description": "The value to set if the condition is true."
                      },
                      "valueFromField": {
                        "type": "string",
                        "description": "The field from which to derive the value if the condition is true. Optional."
                      },
                      "use_data_as_path_value": {
                        "type": "string",
                        "enum": [
                          "1",
                          "0"
                        ],
                        "default": "0"
                      }
                    },
                    "required": [
                      "condition",
                      "value",
                      "valueFromField",
                      "use_data_as_path_value"
                    ]
                  },
                  "description": "Sets the value based on a condition."
                },
                "newField": {
                  "type": "string",
                  "description": "The new field to create or update with the set value."
                }
              },
              "required": [
                "path",
                "value",
                "valueFromField",
                "valueMapping",
                "conditionalValue",
                "newField"
              ],
              "unevaluatedProperties": false
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },

    "Action_Function_UserDefinedFunction": {
      "title": "User Defined Function",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/userDefinedFunctionArgs"
            }
          },
          "required": [
            "params"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_SystemDefinedFunction": {
      "title": "System Defined Function",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/systemDefinedFunctionArgs"
            }
          },
          "required": [
            "params"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_Transform": {
      "title": "Transform",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/transformFunctionArgs"
            }
          },
          "required": [
            "params"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_Filter": {
      "title": "Filter",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/filterFunctionArgs"
            }
          },
          "required": [
            "params"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_Split": {
      "title": "Split",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/splitFunctionArgs"
            }
          },
          "required": [
            "params"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_Merge": {
      "title": "Merge",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/mergeFunctionArgs"
            }
          },
          "required": [
            "params"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_Set": {
      "title": "Set",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/setFunctionArgs"
            }
          },
          "required": [
            "params"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_Join": {
      "title": "Join",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/joinFunctionArgs"
            }
          },
          "required": [
            "params"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_Reducer": {
      "title": "Reducer",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/reducerFunctionArgs"
            }
          },
          "required": [
            "params"
          ]
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_SortMultiByKey": {
      "title": "Sort List of Objects",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/sortMultiByKeyFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_FormatDate": {
      "title": "Format Date",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/formatDateFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_AbsoluteValue": {
      "title": "Absolute Value",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/absoluteValueFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_FuzzyExtractOne": {
      "title": "Fuzzy Extract One",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/fuzzyExtractOneFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_FuzzyExtractN": {
      "title": "Fuzzy Extract Top N",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/fuzzyExtractNFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_FuzzySearch": {
      "title": "Fuzzy Search",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/fuzzySearchFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_FuzzyMatch": {
      "title": "Fuzzy Search",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/fuzzyMatchFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_RegexExtract": {
      "title": "Regex Extract",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/regexExtractFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_Append": {
      "title": "Append",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/appendFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_Prepend": {
      "title": "Prepend",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/prependFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_Concat": {
      "title": "Concat",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/concatFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_ConcatMultiArrayAssoc": {
      "title": "Concat Multi Array Assoc",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/concatMultiArrayAssocFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_CustomPregReplace": {
      "title": "Custom Preg Replace",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/customPregReplaceFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_RegexMapperMultiple": {
      "title": "Regex Mapper Multiple",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/regexMapperMultipleFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_RemoveRepeatedWords": {
      "title": "Remove Repeated Words",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/removeRepeatedWordsFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_AssocArraySumIf": {
      "title": "Assoc Array Sum If",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/assocArraySumIfFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_GetFromObject": {
      "title": "Get From Object",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/getFromObjectFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_FlattenObjects": {
      "title": "Flatten Objects",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/flattenObjectsFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_ExpandLists": {
      "title": "Expand Lists",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/expandListsFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_FlattenAndExpand": {
      "title": "Flatten and Expand",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/flattenAndExpandFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_RenameObjectKeys": {
      "title": "Rename Object Keys",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/renameObjectKeysFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_DateAddSubtractDays": {
      "title": "Date Add Or Subtract Days",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/dateAddSubtractDaysFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_DateDiff": {
      "title": "Date Diff",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/dateDiffFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_DateFormat": {
      "title": "Date Format",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/dateFormatFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_ConvertUnit": {
      "title": "Convert Unit",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/convertUnitFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_ConvertUnitMulti": {
      "title": "Convert Unit Multi",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/convertUnitMultiFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_GetMetricConversionTable": {
      "title": "Get Metric Conversion Table",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/getMetricConversionTableFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_ModelMapping": {
      "title": "Model Mapping",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/modelMappingFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_MakeObjectListUnique": {
      "title": "Make Object List Unique",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/makeObjectListUniqueFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_DuplicateListItem": {
      "title": "Duplicate List Item",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/duplicateListItemFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_GetRandomString": {
      "title": "Get Random String",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/getRandomStringFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_BasicArithmetic": {
      "title": "Basic Arithmetic",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/basicArithmeticFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_Length": {
      "title": "Length",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/lengthFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_CorrectDate": {
      "title": "Correct Date",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/correctDateFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_ParseTemplate": {
      "title": "ParseTemplate",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/parseTemplateFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_PlatformFunctions": {
      "title": "Platform Functions",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/platformFunctionsFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_PatternBasedStemSpellCorrections": {
      "title": "Pattern Based Stem Spell Corrections",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/patternBasedStemSpellCorrectionsFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_ValidateAndCorrectQuantityAndPrices": {
      "title": "Pattern Based Stem Spell Corrections",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/validateAndCorrectQuantityAndPricesFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_ValidateDataStructure": {
      "title": "Validate data structure",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/validateDataStructureFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },
    "Action_Function_Map": {
      "title": "Map",
      "allOf": [
        {
          "$ref": "#/definitions/actionBase"
        },
        {
          "$ref": "#/definitions/functionAction"
        },
        {
          "properties": {
            "params": {
              "$ref": "#/definitions/mapFunctionArgs"
            }
          }
        }
      ],
      "unevaluatedProperties": false
    },

    "actionFunctionsList": {
      "title": "Function Action",
      "type": "object",
      "anyOf": [
        {
          "$ref": "#/definitions/Action_Function_UserDefinedFunction"
        },
        {
          "$ref": "#/definitions/Action_Function_SystemDefinedFunction"
        },
        {
          "$ref": "#/definitions/Action_Function_Transform"
        },
        {
          "$ref": "#/definitions/Action_Function_Filter"
        },
        {
          "$ref": "#/definitions/Action_Function_Split"
        },
        {
          "$ref": "#/definitions/Action_Function_Merge"
        },
        {
          "$ref": "#/definitions/Action_Function_Set"
        },
        {
          "$ref": "#/definitions/Action_Function_Join"
        },
        {
          "$ref": "#/definitions/Action_Function_Reducer"
        },
        {
          "$ref": "#/definitions/Action_Function_SortMultiByKey"
        },
        {
          "$ref": "#/definitions/Action_Function_FormatDate"
        },
        {
          "$ref": "#/definitions/Action_Function_AbsoluteValue"
        },
        {
          "$ref": "#/definitions/Action_Function_FuzzyExtractOne"
        },
        {
          "$ref": "#/definitions/Action_Function_FuzzyExtractN"
        },
        {
          "$ref": "#/definitions/Action_Function_FuzzySearch"
        },
        {
          "$ref": "#/definitions/Action_Function_FuzzyMatch"
        },
        {
          "$ref": "#/definitions/Action_Function_RegexExtract"
        },
        {
          "$ref": "#/definitions/Action_Function_Append"
        },
        {
          "$ref": "#/definitions/Action_Function_Prepend"
        },
        {
          "$ref": "#/definitions/Action_Function_Concat"
        },
        {
          "$ref": "#/definitions/Action_Function_ConcatMultiArrayAssoc"
        },
        {
          "$ref": "#/definitions/Action_Function_CustomPregReplace"
        },
        {
          "$ref": "#/definitions/Action_Function_RegexMapperMultiple"
        },
        {
          "$ref": "#/definitions/Action_Function_RemoveRepeatedWords"
        },
        {
          "$ref": "#/definitions/Action_Function_AssocArraySumIf"
        },
        {
          "$ref": "#/definitions/Action_Function_GetFromObject"
        },
        {
          "$ref": "#/definitions/Action_Function_FlattenObjects"
        },
        {
          "$ref": "#/definitions/Action_Function_ExpandLists"
        },
        {
          "$ref": "#/definitions/Action_Function_FlattenAndExpand"
        },
        {
          "$ref": "#/definitions/Action_Function_RenameObjectKeys"
        },
        {
          "$ref": "#/definitions/Action_Function_DateAddSubtractDays"
        },
        {
          "$ref": "#/definitions/Action_Function_DateDiff"
        },
        {
          "$ref": "#/definitions/Action_Function_DateFormat"
        },
        {
          "$ref": "#/definitions/Action_Function_ConvertUnit"
        },
        {
          "$ref": "#/definitions/Action_Function_ConvertUnitMulti"
        },
        {
          "$ref": "#/definitions/Action_Function_GetMetricConversionTable"
        },
        {
          "$ref": "#/definitions/Action_Function_ModelMapping"
        },
        {
          "$ref": "#/definitions/Action_Function_MakeObjectListUnique"
        },
        {
          "$ref": "#/definitions/Action_Function_DuplicateListItem"
        },
        {
          "$ref": "#/definitions/Action_Function_GetRandomString"
        },
        {
          "$ref": "#/definitions/Action_Function_BasicArithmetic"
        },
        {
          "$ref": "#/definitions/Action_Function_Length"
        },
        {
          "$ref": "#/definitions/Action_Function_CorrectDate"
        },
        {
          "$ref": "#/definitions/Action_Function_ParseTemplate"
        },
        {
          "$ref": "#/definitions/Action_Function_PlatformFunctions"
        },
        {
          "$ref": "#/definitions/Action_Function_PatternBasedStemSpellCorrections"
        },
        {
          "$ref": "#/definitions/Action_Function_ValidateAndCorrectQuantityAndPrices"
        },
        {
          "$ref": "#/definitions/Action_Function_ValidateDataStructure"
        },
        {
          "$ref": "#/definitions/Action_Function_Map"
        }
      ]
    },

    "mapFunctionsList": {
      "anyOf": [
        {
          "title": "User Defined Function",
          "$ref": "#/definitions/userDefinedFunctionArgs"
        },
        {
          "title": "System Defined Function",
          "$ref": "#/definitions/systemDefinedFunctionArgs"
        },
        {
          "title": "Transform",
          "$ref": "#/definitions/transformFunctionArgs"
        },
        {
          "title": "Filter",
          "$ref": "#/definitions/filterFunctionArgs"
        },
        {
          "title": "Split",
          "$ref": "#/definitions/splitFunctionArgs"
        },
        {
          "title": "Merge",
          "$ref": "#/definitions/mergeFunctionArgs"
        },
        {
          "title": "Set",
          "$ref": "#/definitions/setFunctionArgs"
        },
        {
          "title": "Join",
          "$ref": "#/definitions/joinFunctionArgs"
        },
        {
          "title": "Reducer",
          "$ref": "#/definitions/reducerFunctionArgs"
        },
        {
          "title": "Sort Multi By Key",
          "$ref": "#/definitions/sortMultiByKeyFunctionArgs"
        },
        {
          "title": "Format Date",
          "$ref": "#/definitions/formatDateFunctionArgs"
        },
        {
          "title": "Absolute Value",
          "$ref": "#/definitions/absoluteValueFunctionArgs"
        },
        {
          "title": "Fuzzy Extract One",
          "$ref": "#/definitions/fuzzyExtractOneFunctionArgs"
        },
        {
          "title": "Fuzzy Extract N",
          "$ref": "#/definitions/fuzzyExtractNFunctionArgs"
        },
        {
          "title": "Fuzzy Search",
          "$ref": "#/definitions/fuzzySearchFunctionArgs"
        },
        {
          "title": "Fuzzy Match",
          "$ref": "#/definitions/fuzzyMatchFunctionArgs"
        },
        {
          "title": "Regex Extract",
          "$ref": "#/definitions/regexExtractFunctionArgs"
        },
        {
          "title": "Append",
          "$ref": "#/definitions/appendFunctionArgs"
        },
        {
          "title": "Prepend",
          "$ref": "#/definitions/prependFunctionArgs"
        },
        {
          "title": "Concat",
          "$ref": "#/definitions/concatFunctionArgs"
        },
        {
          "title": "Concat Multi Array Assoc",
          "$ref": "#/definitions/concatMultiArrayAssocFunctionArgs"
        },
        {
          "title": "Custom Preg Replace",
          "$ref": "#/definitions/customPregReplaceFunctionArgs"
        },
        {
          "title": "Regex Mapper Multiple",
          "$ref": "#/definitions/regexMapperMultipleFunctionArgs"
        },
        {
          "title": "Remove Repeated Words",
          "$ref": "#/definitions/removeRepeatedWordsFunctionArgs"
        },
        {
          "title": "Assoc Array Sum If",
          "$ref": "#/definitions/assocArraySumIfFunctionArgs"
        },
        {
          "title": "Get From Object",
          "$ref": "#/definitions/getFromObjectFunctionArgs"
        },
        {
          "title": "Flatten Objects",
          "$ref": "#/definitions/flattenObjectsFunctionArgs"
        },
        {
          "title": "Expand Lists",
          "$ref": "#/definitions/expandListsFunctionArgs"
        },
        {
          "title": "Flatten and Expand",
          "$ref": "#/definitions/flattenAndExpandFunctionArgs"
        },
        {
          "title": "Rename Object Keys",
          "$ref": "#/definitions/renameObjectKeysFunctionArgs"
        },
        {
          "title": "Date Add or Subtract Days",
          "$ref": "#/definitions/dateAddSubtractDaysFunctionArgs"
        },
        {
          "title": "Date Diff",
          "$ref": "#/definitions/dateDiffFunctionArgs"
        },
        {
          "title": "Date Format",
          "$ref": "#/definitions/dateFormatFunctionArgs"
        },
        {
          "title": "Convert Unit",
          "$ref": "#/definitions/convertUnitFunctionArgs"
        },
        {
          "title": "Convert Unit Multi",
          "$ref": "#/definitions/convertUnitMultiFunctionArgs"
        },
        {
          "title": "Get Metric Conversion Table",
          "$ref": "#/definitions/getMetricConversionTableFunctionArgs"
        },
        {
          "title": "Model Mapping",
          "$ref": "#/definitions/modelMappingFunctionArgs"
        },
        {
          "title": "Make Object List Unique",
          "$ref": "#/definitions/makeObjectListUniqueFunctionArgs"
        },
        {
          "title": "Duplicate List Item",
          "$ref": "#/definitions/duplicateListItemFunctionArgs"
        },
        {
          "title": "Get Random String",
          "$ref": "#/definitions/getRandomStringFunctionArgs"
        },
        {
          "title": "Basic Arithmetic",
          "$ref": "#/definitions/basicArithmeticFunctionArgs"
        },
        {
          "title": "Length",
          "$ref": "#/definitions/lengthFunctionArgs"
        },
        {
          "title": "Correct Date",
          "$ref": "#/definitions/correctDateFunctionArgs"
        },
        {
          "title": "Parse Template",
          "$ref": "#/definitions/parseTemplateFunctionArgs"
        },
        {
          "title": "Pattern Based Stem Spell Correction",
          "$ref": "#/definitions/patternBasedStemSpellCorrectionsFunctionArgs"
        },
        {
          "title": "Validate and Correct Quantity and Prices",
          "$ref": "#/definitions/validateAndCorrectQuantityAndPricesFunctionArgs"
        },
        {
          "title": "Validate and Correct Quantity and Prices",
          "$ref": "#/definitions/validateDataStructureFunctionArgs"
        },
        {
          "title": "Platform Functions",
          "$ref": "#/definitions/platformFunctionsFunctionArgs"
        },
        {
          "title": "Map",
          "$ref": "#/definitions/mapFunctionArgs"
        }
      ]
    },

    "Rule_ConditionalRule": {
      "title": "Conditional Rule",
      "description": "A rule encapsulates a set of actions to perform when the rule's condition is true",
      "type": "object",
      "properties": {
        "rule": {
          "title": "Name of the Rule",
          "type": "string",
          "description": "A string that represents the name of the rule."
        },
        "stage": {
          "type": "string",
          "description": "Defines a unique identifier for this rule"
        },
        "description": {
          "title": "Description of the Rule",
          "type": "string",
          "description": "A string that represents the description of the rule."
        },
        "dependencies": {
          "description": "A list of stages that this specific stage depends on ie its parents that must be executed first before it gets executed. Rule dependencies can only be actions and not other rules",
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        },
        "skip": {
          "type": "string",
          "description": "Defines whether this rule should be skipped or not. If skipped, all the actions under this rule will be skipped",
          "enum": [
            "0",
            "1"
          ],
          "default": "0"
        },
        "condition": {
          "$ref": "#/definitions/Condition"
        },
        "actions": {
          "title": "List of Actions",
          "description": "An array of actions to be executed in order.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/Action_Deletion_DeletePathValue"
              },
              {
                "$ref": "#/definitions/Action_Deletion_RemovePath"
              },
              {
                "$ref": "#/definitions/Action_Arithmetic"
              },
              {
                "$ref": "#/definitions/Action_Set"
              },
              {
                "$ref": "#/definitions/actionFunctionsList"
              }
            ]
          }
        }
      },
      "required": [
        "rule",
        "stage",
        "description",
        "dependencies",
        "skip",
        "condition",
        "actions"
      ],
      "additionalProperties": false
    }
  },
  "items": {
    "$ref": "#/definitions/Rule_ConditionalRule"
  }
}
