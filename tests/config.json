[
  {
    "rule": "Get sender details",
    "description": "",
    "stage": "get_sender_details",
    "dependencies": [],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "action": "function",
        "description": "",
        "stage": "get_sender_details",
        "dependencies": [],
        "skip": "0",
        "params": {
          "path": "sender_details",
          "function": "user_defined_function",
          "args": {
            "function_name": "get_sender_details"
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get extraction details",
    "description": "",
    "stage": "get_extraction_details",
    "dependencies": [],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "action": "function",
        "description": "",
        "stage": "get_extraction_details",
        "dependencies": [],
        "skip": "0",
        "params": {
          "path": "extraction_data",
          "function": "user_defined_function",
          "args": {
            "function_name": "get_extraction_data",
            "fields": [
              "document.link",
              "document_text"
            ]
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Set default value for online sales status",
    "description": "",
    "stage": "default_online_sales_order",
    "dependencies": [],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "",
        "stage": "default_online_sales_order",
        "dependencies": [],
        "skip": "0",
        "action": "set",
        "params": {
          "path": "is_online_shop_order",
          "value": "No",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Set if order from online sales",
    "description": "",
    "stage": "set_is_online_sales_order",
    "dependencies": [
      "get_extraction_details",
      "default_online_sales_order"
    ],
    "skip": "0",
    "condition": {
      "operator": "matches",
      "path": "extraction_data.document_text",
      "value": "Osho Chemical Industries Online Shop"
    },
    "actions": [
      {
        "description": "",
        "stage": "set_is_online_sales_order",
        "dependencies": [],
        "skip": "0",
        "action": "set",
        "params": {
          "path": "is_online_shop_order",
          "value": "Yes",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      },
      {
        "description": "",
        "stage": "set_online_sales_customer",
        "dependencies": [],
        "skip": "0",
        "action": "set",
        "params": {
          "path": "customer_name",
          "value": "CASH SALE A/C - ONLINE SALES",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "If customer name is empty, set ordered by name as the customer name",
    "description": "",
    "stage": "set_customer_name_from_ordered_by_name",
    "dependencies": [],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name",
          "operator": "not exists"
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "set_customer_name_from_ordered_by_name",
        "dependencies": [],
        "skip": "0",
        "action": "set",
        "params": {
          "path": "customer_name",
          "value": "",
          "valueFromField": "ordered_by_name",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Use today's date as order date, if empty",
    "description": "",
    "stage": "set_order_date",
    "dependencies": [],
    "skip": "0",
    "condition": {
      "path": "order_date",
      "operator": "not exists"
    },
    "actions": [
      {
        "description": "",
        "stage": "set_order_date",
        "dependencies": [],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "order_date",
          "function": "transform",
          "args": {
            "transformer": "string_to_date_time",
            "transformer_args": {
              "format": "Y-m-d H:i:s",
              "pre_modifier": "Today",
              "post_modifier": ""
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get customers list",
    "description": "",
    "stage": "get_customers_list",
    "dependencies": [],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "",
        "stage": "get_customers_list",
        "dependencies": [],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "customers_list",
          "function": "user_defined_function",
          "args": {
            "function_name": "get_master_data",
            "type": "customers"
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Match customer",
    "description": "",
    "stage": "match_customer",
    "dependencies": [
      "get_customers_list"
    ],
    "skip": "0",
    "condition": {
      "path": "customers_list",
      "operator": "exists"
    },
    "actions": [
      {
        "description": "Make customer name upper case to match the search list",
        "stage": "uppercase_order_customer_name",
        "dependencies": [
          "set_online_sales_customer",
          "set_customer_name_from_ordered_by_name"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "customer_name",
          "function": "strtoupper",
          "args": {},
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "match_customer",
        "dependencies": [
          "uppercase_order_customer_name"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "customer_name",
          "function": "user_defined_function",
          "args": {
            "function_name": "semantic_search",
            "corpus": {
              "path": "customers_list"
            },
            "corpus_search_key": "Name",
            "corpus_id_key": "No",
            "master_data_type": "customers",
            "similarity_threshold": "0",
            "stop_words": [
              "limited",
              "ltd",
              "P.O BOX",
              "Nairobi",
              "Kenya"
            ],
            "model": "adaV3"
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get all products list",
    "description": "",
    "stage": "get_all_products_list",
    "dependencies": [],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "",
        "stage": "get_all_products_list",
        "dependencies": [],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "all_products_list",
          "function": "user_defined_function",
          "args": {
            "function_name": "get_master_data",
            "type": "all products"
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Filter out blocked products, products from RMPAC/PROMO categories as well as the listed bulk items",
        "stage": "get_cleaned_products_list",
        "dependencies": [
          "get_all_products_list"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "all_products_list",
          "function": "filter",
          "args": {
            "filter_criteria": {
              "operator": "AND",
              "conditions": [
                {
                  "term": "1",
                  "mode": "!=",
                  "key": "blocked",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "RMPAC",
                  "mode": "!=",
                  "key": "itemCategoryCode",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "PROMO",
                  "mode": "!=",
                  "key": "itemCategoryCode",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "PUBH_RM",
                  "mode": "!=",
                  "key": "itemCategoryCode",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "key": "number",
                  "mode": "not in",
                  "term": [
                    "ABI0056",
                    "ABI0070",
                    "ABIO0090",
                    "ABIO0100",
                    "AF0L0225",
                    "AFER0003",
                    "AFER0014",
                    "AFER0020",
                    "AFER0028",
                    "AFER0054",
                    "AFER0064",
                    "AFOL0008",
                    "AFOL0091",
                    "AFOL0109",
                    "AFOL0126",
                    "AFOL0143",
                    "AFOL0144",
                    "AFOL0145",
                    "AFOL0146",
                    "AFOL0147",
                    "AFOL0148",
                    "AFOL0154",
                    "AFOL0170",
                    "AFOL0177",
                    "AFOL0179",
                    "AFOL0180",
                    "AFOL0194",
                    "AFOL0222",
                    "AFOL0223",
                    "AFUN0003",
                    "AFUN0018",
                    "AFUN0075",
                    "AFUN0077",
                    "AFUN0084",
                    "AFUN0086",
                    "AFUN0092",
                    "AFUN0094",
                    "AFUN0108",
                    "AFUN0124",
                    "AFUN0129",
                    "AFUN0131",
                    "AFUN0137",
                    "AFUN0155",
                    "AFUN0167",
                    "AFUN0174",
                    "AFUN0175",
                    "AFUN0181",
                    "AFUN0182",
                    "AHER0003",
                    "AHER0019",
                    "AHER0026",
                    "AHER0036",
                    "AHER0044",
                    "AHER0049",
                    "AHER0050",
                    "AHER0051",
                    "AHER0056",
                    "AHER0057",
                    "AHER0062",
                    "AHER0066",
                    "AHER0067",
                    "AINS0002",
                    "AINS0019",
                    "AINS0031",
                    "AINS0040",
                    "AINS0074",
                    "AINS0078",
                    "AINS0126",
                    "AINS0134",
                    "AINS0141",
                    "AINS0142",
                    "AINS0145",
                    "AINS0150",
                    "AINS0151",
                    "AINS0153",
                    "AINS0154",
                    "AINS0155",
                    "AINS0169",
                    "AINS0171",
                    "AINS0173",
                    "AINS0199",
                    "AINS0225",
                    "AINS0233",
                    "AINS0263",
                    "AINS0264",
                    "AINS0266",
                    "AINS0282",
                    "AINS0300",
                    "AINS0301",
                    "AINS0302",
                    "AINS0325",
                    "AINS0362",
                    "AINS0363",
                    "AINS0364",
                    "AINS0365",
                    "AINS0369",
                    "AINS0370",
                    "AINS0371",
                    "AINS0375",
                    "AINS0376",
                    "AINS0377",
                    "AINS0378",
                    "AINS0389",
                    "AINS0390",
                    "AINS0391",
                    "AINS0400",
                    "AINS0410",
                    "AINS0412",
                    "AINS0413",
                    "AINS0418",
                    "AINS0427",
                    "AINS0428",
                    "AINS0436",
                    "AINS0437",
                    "AINS0443",
                    "AINS0456",
                    "IFOO0062",
                    "IFOO0083",
                    "IFOO0100",
                    "IFOO0103",
                    "IIND0006",
                    "IIND0009",
                    "IIND0071",
                    "IIND0075",
                    "IIND0077",
                    "IIND0101",
                    "IIND0126",
                    "IIND0134",
                    "IIND0148",
                    "IIND0160",
                    "IIND0172",
                    "IIND0188",
                    "IIND0220",
                    "IIND0228",
                    "IIND0231",
                    "ILEA0045",
                    "IOXI0007",
                    "IOXI0029",
                    "IOXI0041",
                    "IOXI0048",
                    "IOXI0049",
                    "IOXI0050",
                    "IOXI0051",
                    "IPHA0001",
                    "ISOL0025",
                    "ISOL0081",
                    "ISOL0082",
                    "ISOL0083",
                    "ISOL0084",
                    "PUBH0065",
                    "PUBH0087",
                    "PUBH0088",
                    "PUBH0090",
                    "PUBH0095",
                    "PUBH0096",
                    "PUBH0098",
                    "PUBH0099",
                    "PUBH0121",
                    "PUBH0125",
                    "PUBH0132",
                    "PUBH0137",
                    "PURM0015",
                    "PURM0043",
                    "PURM0075",
                    "RM00036",
                    "VANB0005",
                    "VDEW0028",
                    "VDEW0029",
                    "VDEW0049",
                    "VDEW0050",
                    "VDEW0057",
                    "VDEW0058",
                    "VEPP0012",
                    "VEPP0017",
                    "VEPP0043",
                    "VFSU0034",
                    "VFSU0052",
                    "VFSU0070",
                    "VFSU0071",
                    "VFSU0074",
                    "VFSU0090",
                    "VFSU0099",
                    "VFSU0100",
                    "VFSU0101",
                    "VMES0011",
                    "VMES0013",
                    "VOTH0004",
                    "VOTH0005",
                    "VOTH0020"
                  ],
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                }
              ]
            }
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get historically ordered products for the customer",
    "description": "",
    "stage": "get_historical_products_list",
    "dependencies": [
      "match_customer"
    ],
    "skip": "1",
    "condition": {
      "path": "customer_name.meta_data.id",
      "operator": "exists"
    },
    "actions": [
      {
        "description": "",
        "stage": "get_historical_products_list",
        "dependencies": [],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "products_list",
          "function": "user_defined_function",
          "args": {
            "function_name": "get_master_data",
            "type": "customer products"
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Filter only products for the customer",
        "stage": "get_customer_products_list",
        "dependencies": [
          "get_historical_products_list"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "products_list",
          "function": "filter",
          "args": {
            "filter_criteria": {
              "term": {
                "path": "customer_name.meta_data.id"
              },
              "mode": "==",
              "key": "sellToCustomerNumber",
              "similarity_threshold": "",
              "term_exclusion_pattern": "",
              "value_exclusion_pattern": ""
            }
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "merge_customer_to_all_products",
        "dependencies": [
          "get_customer_products_list",
          "get_cleaned_products_list"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "",
          "function": "merge",
          "args": {
            "left": {
              "path": "products_list"
            },
            "right": {
              "path": "all_products_list"
            },
            "join": {
              "type": "inner",
              "on": "left.number = right.number"
            },
            "fields": [
              "right.number",
              "right.displayName",
              "right.itemCategoryCode",
              "right.blocked",
              "right.baseUnitOfMeasureCode",
              "right.PackSize",
              "right.PcsPerCarton"
            ],
            "group_by": []
          },
          "newField": "products_list",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "If no historical products, we use the all products list",
    "description": "",
    "stage": "set_all_to_customer_products",
    "dependencies": [
      "merge_customer_to_all_products"
    ],
    "skip": "0",
    "condition": {
      "path": "products_list",
      "operator": "not exists"
    },
    "actions": [
      {
        "description": "",
        "stage": "set_all_to_customer_products",
        "dependencies": [],
        "skip": "0",
        "action": "set",
        "params": {
          "path": "products_list",
          "value": "",
          "valueFromField": "all_products_list",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Make quantity absolute and set uom to standard values",
    "description": "",
    "stage": "items_quantity_transformation",
    "dependencies": [],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "",
        "stage": "make_quantity_absolute",
        "dependencies": [],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "items.*.unit_of_measure.*.selling_quantity",
          "function": "abs",
          "args": {},
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Standardize selling units",
        "stage": "standardize_selling_units",
        "dependencies": [],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "items",
          "function": "map",
          "args": {
            "path": "",
            "function": "set",
            "args": {
              "data_path": "unit_of_measure.*.selling_unit",
              "value": "",
              "valueFromField": "",
              "valueMapping": "",
              "conditionalValue": [
                {
                  "condition": {
                    "operator": "matches",
                    "value": "Kilogram|KG"
                  },
                  "value": "kg"
                },
                {
                  "condition": {
                    "operator": "matches",
                    "value": "Liter|Litre|Ltr|Lts|\\bL\\b"
                  },
                  "value": "l"
                },
                {
                  "condition": {
                    "operator": "matches",
                    "value": "Millilitre|Milliliter|ML"
                  },
                  "value": "ml"
                },
                {
                  "condition": {
                    "operator": "matches",
                    "value": "Gram|GM|GRM|\\bG\\b"
                  },
                  "value": "g"
                }
              ],
              "newField": ""
            },
            "newField": "",
            "strict": "0",
            "condition": ""
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Make default selling unit cartons except for the specified customers",
    "description": "",
    "stage": "set_default_selling_unit",
    "dependencies": [],
    "skip": "1",
    "condition": {
      "operator": "not in list all",
      "path": "customer_name.matched_value",
      "value": [
        "naivas",
        "majid",
        "quick\\s*mart",
        "chandarana"
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "set_default_selling_unit",
        "dependencies": [],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "items",
          "function": "map",
          "args": {
            "path": "",
            "function": "set",
            "args": {
              "data_path": "unit_of_measure.*.selling_unit",
              "value": "",
              "valueFromField": "",
              "valueMapping": "",
              "conditionalValue": [
                {
                  "condition": {
                    "operator": "matches",
                    "value": "piece|pc"
                  },
                  "value": "cartons"
                }
              ],
              "newField": ""
            },
            "newField": "",
            "strict": "0",
            "condition": ""
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Configure details about product list pack sizes",
    "description": "",
    "stage": "product_transformations",
    "dependencies": [
      "set_all_to_customer_products"
    ],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "Augment product descriptions for better matching",
        "stage": "products_description_transformation",
        "dependencies": [],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "products_list.*.displayName",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "\\b(EASYGRO)\\b": "EASY GRO",
                "FLOWER & FRUIT": "FLOWER & FRUIT (FF)"
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Get the pack unit of measure",
        "stage": "get_pack_unit_of_measure",
        "dependencies": [],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "products_list",
          "function": "map",
          "args": {
            "path": "PackSize",
            "function": "regex_extract",
            "args": {
              "pattern": "\\b\\d+\\s*(KG|GM|GRM|ML|G|L|Ltr|PC|PCS)\\b",
              "flag": "1"
            },
            "newField": "pack_unit_of_measure",
            "strict": "0",
            "condition": ""
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Get the pack unit size",
        "stage": "get_pack_unit_size",
        "dependencies": [],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "products_list",
          "function": "map",
          "args": {
            "path": "PackSize",
            "function": "regex_extract",
            "args": {
              "pattern": "^(?:(?=.*\\bx\\b).*?)?(\\d+(\\.\\d+)?)\\s*(KG|GM|GRM|ML|G|L|Ltr|PC|PCS)\\b",
              "flag": "1"
            },
            "newField": "pack_unit_size",
            "strict": "0",
            "condition": ""
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Get the metric conversion table",
        "stage": "get_metric_conversion_table",
        "dependencies": [],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "metric_conversion_table",
          "function": "user_defined_function",
          "args": {
            "function_name": "get_metric_conversion_table"
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Map pack unit of measure to a standard value",
        "stage": "standardize_pack_unit_of_measure",
        "dependencies": [
          "get_pack_unit_of_measure"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "products_list",
          "function": "map",
          "args": {
            "path": "",
            "function": "set",
            "args": {
              "data_path": "pack_unit_of_measure",
              "value": "",
              "valueFromField": "",
              "valueMapping": "",
              "conditionalValue": [
                {
                  "condition": {
                    "operator": "matches",
                    "value": "Kilogram|KG"
                  },
                  "value": "kg"
                },
                {
                  "condition": {
                    "operator": "matches",
                    "value": "Liter|Litre|Ltr|Lts|\\bL\\b"
                  },
                  "value": "l"
                },
                {
                  "condition": {
                    "operator": "matches",
                    "value": "Millilitre|Milliliter|ML"
                  },
                  "value": "ml"
                },
                {
                  "condition": {
                    "operator": "matches",
                    "value": "Gram|GM|GRM|\\bG\\b"
                  },
                  "value": "g"
                }
              ],
              "newField": ""
            },
            "newField": "",
            "strict": "0",
            "condition": ""
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Get inverse pack unit size",
        "stage": "get_inverse_pack_unit_size",
        "dependencies": [
          "get_pack_unit_size"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "products_list",
          "function": "map",
          "args": {
            "path": "",
            "function": "basic_arithmetic",
            "args": {
              "operator": "divide",
              "operands": [
                "1",
                {
                  "path": "pack_unit_size"
                }
              ],
              "defaultValue": {
                "path": "pack_unit_size"
              },
              "moduloHandler": "round",
              "decimalPlaces": "3"
            },
            "newField": "inverse_pack_unit_size",
            "strict": "0",
            "condition": ""
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Get inverse PcsPerCarton",
        "stage": "get_inverse_pack_pieces_per_carton",
        "dependencies": [],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "products_list",
          "function": "map",
          "args": {
            "path": "",
            "function": "basic_arithmetic",
            "args": {
              "operator": "divide",
              "operands": [
                "1",
                {
                  "path": "PcsPerCarton"
                }
              ],
              "defaultValue": {
                "path": "PcsPerCarton"
              },
              "moduloHandler": "round",
              "decimalPlaces": "3"
            },
            "newField": "inverse_pcs_per_carton",
            "strict": "0",
            "condition": ""
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Prepare items and products for matching",
    "description": "",
    "stage": "prepare_items_products_for_matching",
    "dependencies": [
      "set_all_to_customer_products",
      "standardize_pack_unit_of_measure",
      "get_inverse_pack_unit_size",
      "get_inverse_pack_pieces_per_carton"
    ],
    "skip": "0",
    "condition": {
      "path": "products_list",
      "operator": "exists"
    },
    "actions": [
      {
        "description": "Make item descriptions uppercase",
        "stage": "uppercase_item_descriptions",
        "dependencies": [],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "items",
          "function": "map",
          "args": {
            "path": "description",
            "function": "strtoupper",
            "args": {},
            "newField": "description",
            "strict": "0",
            "condition": ""
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Make product names uppercase",
        "stage": "uppercase_product_names",
        "dependencies": [],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "products_list",
          "function": "map",
          "args": {
            "path": "displayName",
            "function": "strtoupper",
            "args": {},
            "newField": "displayName",
            "strict": "0",
            "condition": ""
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "We add the products to each item",
        "stage": "item_add_products_list",
        "dependencies": [
          "uppercase_product_names"
        ],
        "skip": "0",
        "action": "set",
        "params": {
          "path": "items.*.products_list",
          "value": "",
          "valueFromField": "products_list",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      },
      {
        "description": "Remove numbers and uoms from description",
        "stage": "prepare_item_filter_descriptions",
        "dependencies": [
          "uppercase_item_descriptions"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "items.*.description",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "\\b\\d+\\b|\\b\\d*(MG|G|GM|GRM|GMS|KG|KGS|PC|PCS|ML|L|LTR|LTRS|M|X)\\b|[^\\w\\s]+": ""
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "items.*.filterDescription",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Remove numbers and uoms from display name in each product",
        "stage": "prepare_item_product_filter_name",
        "dependencies": [
          "item_add_products_list"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "items.*.products_list.*.displayName",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "\\b\\d+\\b|\\b\\d*(MG|G|GM|GRM|GMS|KG|KGS|PC|PCS|ML|L|LTR|LTRS|M|X)\\b|[^\\w\\s]+": ""
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "items.*.products_list.*.filterDescription",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Extract the top 20 matching products using fuzzy match",
        "stage": "extract_top_similar_item_products",
        "dependencies": [
          "prepare_item_filter_descriptions",
          "prepare_item_product_filter_name"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "items",
          "function": "map",
          "args": {
            "path": "products_list",
            "function": "fuzzy_extract_n",
            "args": {
              "query": {
                "path": "filterDescription"
              },
              "choices": {
                "path": "products_list"
              },
              "searchKey": "filterDescription",
              "n": "20"
            },
            "newField": "products_list",
            "strict": "0",
            "condition": ""
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Correct common OCR Mistakes",
        "stage": "correct_ocr_mistakes",
        "dependencies": [
          "uppercase_item_descriptions"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "items.*.description",
          "function": "regex_mapper_multiple",
          "args": {
            "mappers": [
              {
                "description": "Check for common misspelt units of measurements that are immediately follow a number. For example 100CJ -> 100g (CJ being misread small g).",
                "order": "1",
                "data": {
                  "pattern": "\\b(\\d+\\s*(?:CJ))\\b",
                  "modifiers": "i",
                  "replacements": [
                    {
                      "pattern": "CJ",
                      "replacement": "G"
                    }
                  ]
                }
              },
              {
                "description": "Check for common misspellings of ML as MI. Pattern checks phrases ending in MI",
                "order": "2",
                "data": {
                  "pattern": "\\b(\\w*\\s*(?:MI|M\\'))(?=\\s|$)",
                  "modifiers": "i",
                  "replacements": [
                    {
                      "pattern": "M(I|\\')",
                      "replacement": "ML"
                    }
                  ]
                }
              },
              {
                "description": "Correct for misspelt PCS. Typically follows the pattern of pes as is the case in 'lopes', '10pes' et al",
                "order": "3",
                "data": {
                  "pattern": "\\b((?:lo+|\\d+\\s*)pes)\\b",
                  "modifiers": "i",
                  "replacements": [
                    {
                      "pattern": "PES",
                      "replacement": "PCS"
                    }
                  ]
                }
              },
              {
                "description": "Check for common misspelt numbers that are immediately followed by common units of measure. For instance, I -> 1, S -> 5, O -> 0 et al as is in cases like SOG -> 50G or loog -> 100g",
                "order": "4",
                "data": {
                  "pattern": "(?<=^|\\s)([ISOBZL]+)(?=\\s*(?:L|LTR|LT|LTS|Liters|Liter|Litre|Litres|ML|MLS|KG|G|GM|GMS|GRM|GRMS|CM|MM|PC|PCS)\\b|\\s|$)",
                  "modifiers": "i",
                  "replacements": [
                    {
                      "pattern": "I|L",
                      "replacement": "1"
                    },
                    {
                      "pattern": "S",
                      "replacement": "5"
                    },
                    {
                      "pattern": "O",
                      "replacement": "0"
                    },
                    {
                      "pattern": "B",
                      "replacement": "8"
                    },
                    {
                      "pattern": "Z",
                      "replacement": "2"
                    }
                  ]
                }
              }
            ],
            "sort_by_order": "1"
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Clean item descriptions",
        "stage": "clean_item_descriptions",
        "dependencies": [
          "correct_ocr_mistakes"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "items.*.description",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "HC-": "",
                "(?<=\\S)[-_]|[-_](?=\\S)": "[space]-[space]",
                "\\bIL\\b": "1L",
                "(\\d+)\\s*mls\\b": "$1ML",
                "(\\d+)\\s*(?:LTR|LTRS|LT|LTS)\\b": "$1L",
                "(.*?)(\\b(?:\\d+(?:\\.\\d+)?)\\s*(?:L|LTR|LT|LTS|Liters|Liter|Litre|Litres|ML|MLS|KG|G|GM|GMS|GRM|GRMS|CM|MM)\\b)\\s*(.*?)\\s*([\\(\\[].*[\\)\\]])?$": "$1$3 $2 $4",
                "\\bMOS\\s*-\\s*KILL\\b": "MOSKILL",
                "\\b(M\/COILS)\\b": "MOSQUITO COILS",
                "^(?!.*\\b(MOSKILL|MOSQUITO)\\b)(?:(RED|GREEN)(?:[._-]?(COILS?)?)?)$": "MOSKILL $0"
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Clean item product descriptions",
        "stage": "clean_item_product_names",
        "dependencies": [
          "uppercase_product_names"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "items.*.products_list.*.displayName",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "(?<=\\S)[-_]|[-_](?=\\S)": "[space]-[space]",
                "\\(DUDU\\)": "[space]DUDU[space]",
                "(\\d+)\\s*mls\\b": "$1ML",
                "(\\d+)\\s*(?:LTR|LTRS|LT|LTS)\\b": "$1L",
                "(.*?)(\\b(?:\\d+(?:\\.\\d+)?)\\s*(?:L|LTR|LT|LTS|Liters|Liter|Litre|Litres|ML|MLS|KG|G|GM|GMS|GRM|GRMS|CM|MM)\\b)\\s*(.*?)\\s*([\\(\\[].*[\\)\\]])?$": "$1$3 $2 $4",
                "\\bMOS-KILL\\b": "MOSKILL"
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Add pack configuration to description",
        "stage": "product_description_append_pack_details",
        "dependencies": [
          "products_description_transformation",
          "clean_item_product_names"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "items",
          "function": "map",
          "args": {
            "path": "products_list",
            "function": "map",
            "args": {
              "path": "",
              "function": "concat",
              "args": {
                "data_to_concat": [
                  {
                    "path": "displayName"
                  },
                  {
                    "path": "PackSize"
                  }
                ],
                "seperator": "",
                "enclosure": "square brackets"
              },
              "newField": "displayName",
              "strict": "0",
              "condition": ""
            },
            "newField": "",
            "strict": "0",
            "condition": ""
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "We add pack configuration details to items for some customers, excluding others",
    "description": "",
    "stage": "item_descriptions_add_pack_details",
    "dependencies": [
      "match_customer",
      "clean_item_descriptions"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name.meta_data.value",
      "operator": "not in list all",
      "value": [
        "NAIVAS",
        "MAJID",
        "QUICK MART"
      ]
    },
    "actions": [
      {
        "description": "Append pack size to description",
        "stage": "item_descriptions_add_pack_details",
        "dependencies": [],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "items",
          "function": "map",
          "args": {
            "path": "",
            "function": "append",
            "args": {
              "data_to_append": [
                "[",
                {
                  "path": "pack_configuration.pack_size"
                },
                "x",
                {
                  "path": "pack_configuration.unit_size"
                },
                "]"
              ],
              "seperator": "",
              "use_data_as_path_value": "",
              "value_key": "description"
            },
            "newField": "",
            "strict": "0",
            "condition": {
              "operator": "AND",
              "conditions": [
                {
                  "path": "pack_configuration.pack_size",
                  "operator": "exists"
                },
                {
                  "path": "pack_configuration.pack_size",
                  "operator": "!=",
                  "value": "0"
                },
                {
                  "path": "pack_configuration.unit_size",
                  "operator": "exists"
                },
                {
                  "path": "pack_configuration.unit_size",
                  "operator": "!=",
                  "value": "0"
                }
              ]
            }
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Match Products",
    "description": "",
    "stage": "match_products",
    "dependencies": [
      "item_descriptions_add_pack_details",
      "product_description_append_pack_details"
    ],
    "skip": "0",
    "condition": {
      "path": "products_list",
      "operator": "exists"
    },
    "actions": [
      {
        "description": "We do semantic search on each product based on its own set of product list",
        "stage": "match_products",
        "dependencies": [
          "extract_top_similar_item_products"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "items",
          "function": "map",
          "args": {
            "path": "description",
            "function": "user_defined_function",
            "args": {
              "function_name": "semantic_search",
              "corpus": {
                "path": "products_list"
              },
              "corpus_search_key": "displayName",
              "corpus_id_key": "number",
              "master_data_type": "all products",
              "similarity_threshold": "0",
              "stop_words": [
                "limited",
                "ltd",
                "P.O BOX",
                "Nairobi",
                "Kenya"
              ],
              "model": "adaV3"
            },
            "newField": "description",
            "strict": "0",
            "condition": ""
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "remove_item_products_list",
        "dependencies": [
          "match_products"
        ],
        "skip": "0",
        "action": "remove_path",
        "params": {
          "path": "items.*.products_list"
        }
      }
    ]
  },
  {
    "rule": "Handle quantities and units conversion",
    "description": "",
    "stage": "do_unit_conversion",
    "dependencies": [
      "remove_item_products_list",
      "get_metric_conversion_table"
    ],
    "skip": "0",
    "condition": {
      "path": "items.0.description.meta_data",
      "operator": "exists"
    },
    "actions": [
      {
        "description": "First, we standardize item selling unit to be the same unit as the matched product unit, if in metric units",
        "stage": "match_item_and_product_metric_selling_unit",
        "dependencies": [],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "",
          "function": "convert_unit_multi",
          "args": {
            "items": {
              "path": "items"
            },
            "conversion_table": {
              "path": "metric_conversion_table"
            },
            "quantity": {
              "in_item_path": "unit_of_measure.0.selling_quantity"
            },
            "from_unit": {
              "in_item_path": "unit_of_measure.0.selling_unit"
            },
            "to_unit": {
              "in_item_path": "description.meta_data.other_details.pack_unit_of_measure"
            },
            "invert_factor": "0",
            "output_path": "standardized_quantity_unit"
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Set the default conversion table",
        "stage": "set_default_conversion_table",
        "dependencies": [],
        "skip": "0",
        "action": "set",
        "params": {
          "path": "items.*.conversion_table",
          "value": [
            {
              "from": "",
              "to": "pieces",
              "factor": "0"
            }
          ],
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      },
      {
        "description": "Set the conversion table from value",
        "stage": "set_conversion_table_from_value",
        "dependencies": [
          "set_default_conversion_table",
          "match_item_and_product_metric_selling_unit"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "items",
          "function": "map",
          "args": {
            "path": "",
            "function": "set",
            "args": {
              "data_path": "",
              "value": "",
              "valueFromField": "",
              "valueMapping": "",
              "conditionalValue": [
                {
                  "condition": {
                    "operator": "AND",
                    "conditions": [
                      {
                        "path": "standardized_quantity_unit.original_unit",
                        "operator": "in list any",
                        "value": [
                          "\\b(mg|g|kg)\\b",
                          "\\b(mm|cm|dm|m|km)\\b",
                          "\\b(ml|cl|l)\\b"
                        ]
                      }
                    ]
                  },
                  "use_data_as_path_value": "",
                  "value": "",
                  "valueFromField": "standardized_quantity_unit.converted_unit"
                },
                {
                  "condition": {
                    "path": "standardized_quantity_unit.original_unit",
                    "operator": "in list any",
                    "value": [
                      "Carton|CTN|Pack",
                      "PCS|PC|Piece",
                      "Each",
                      "Packet|PKT",
                      "\b(?!bale/)bag\b",
                      "BG"
                    ]
                  },
                  "use_data_as_path_value": "",
                  "value": "",
                  "valueFromField": "standardized_quantity_unit.original_unit"
                }
              ],
              "newField": "conversion_table.0.from"
            },
            "newField": "",
            "strict": "0",
            "condition": ""
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Set the conversion table factor value.",
        "stage": "set_conversion_table_factor_value",
        "dependencies": [
          "set_default_conversion_table"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "items",
          "function": "map",
          "args": {
            "path": "",
            "function": "set",
            "args": {
              "data_path": "",
              "value": "",
              "valueFromField": "",
              "valueMapping": "",
              "conditionalValue": [
                {
                  "condition": {
                    "operator": "AND",
                    "conditions": [
                      {
                        "path": "conversion_table.0.from",
                        "operator": "in list any",
                        "value": [
                          "\\b(mg|g|kg)\\b",
                          "\\b(mm|cm|dm|m|km)\\b",
                          "\\b(ml|cl|l)\\b"
                        ]
                      }
                    ]
                  },
                  "use_data_as_path_value": "",
                  "value": "",
                  "valueFromField": "description.meta_data.other_details.inverse_pack_unit_size"
                },
                {
                  "condition": {
                    "path": "conversion_table.0.from",
                    "operator": "in list any",
                    "value": [
                      "Carton",
                      "CTN",
                      "Pack"
                    ]
                  },
                  "use_data_as_path_value": "",
                  "value": "",
                  "valueFromField": "description.meta_data.other_details.PcsPerCarton"
                },
                {
                  "condition": {
                    "path": "conversion_table.0.from",
                    "operator": "in list any",
                    "value": [
                      "PCS",
                      "PC",
                      "Piece",
                      "Each",
                      "Packet",
                      "PKT",
                      "\b(?!bale/)bag\b",
                      "BG"
                    ]
                  },
                  "use_data_as_path_value": "",
                  "value": "1",
                  "valueFromField": ""
                }
              ],
              "newField": "conversion_table.0.factor"
            },
            "newField": "",
            "strict": "0",
            "condition": ""
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Handle quantity conversion",
        "stage": "convert_item_quantity",
        "dependencies": [
          "set_conversion_table_factor_value",
          "set_conversion_table_from_value"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "",
          "function": "convert_unit_multi",
          "args": {
            "items": {
              "path": "items"
            },
            "conversion_table": {
              "in_item_path": "conversion_table"
            },
            "quantity": {
              "in_item_path": "standardized_quantity_unit.converted_value"
            },
            "from_unit": {
              "in_item_path": "standardized_quantity_unit.converted_unit"
            },
            "to_unit": "pieces",
            "invert_factor": "0",
            "output_path": "converted_units"
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Remove all unwanted fields",
    "description": "",
    "stage": "remove_unwanted_fields",
    "dependencies": [],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "",
        "stage": "remove_customers_list",
        "dependencies": [
          "match_customer"
        ],
        "skip": "0",
        "action": "remove_path",
        "params": {
          "path": "customers_list"
        }
      },
      {
        "description": "",
        "stage": "remove_products_list",
        "dependencies": [
          "remove_item_products_list"
        ],
        "skip": "0",
        "action": "remove_path",
        "params": {
          "path": "products_list"
        }
      },
      {
        "description": "",
        "stage": "remove_all_products_list",
        "dependencies": [
          "remove_item_products_list"
        ],
        "skip": "0",
        "action": "remove_path",
        "params": {
          "path": "all_products_list"
        }
      },
      {
        "description": "",
        "stage": "remove_metric_conversion_table",
        "dependencies": [
          "convert_item_quantity"
        ],
        "skip": "0",
        "action": "remove_path",
        "params": {
          "path": "metric_conversion_table"
        }
      }
    ]
  }
]
