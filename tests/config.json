[
  {
    "rule": "Get sender details",
    "stage": "get_sender_details",
    "description": "",
    "dependencies": [],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "action": "function",
        "description": "",
        "stage": "get_sender_details",
        "dependencies": [],
        "skip": "0",
        "params": {
          "path": "sender_details",
          "function": "user_defined_function",
          "args": {
            "function_name": "get_sender_details"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get extraction details",
    "stage": "get_extraction_details",
    "description": "",
    "dependencies": [],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "action": "function",
        "description": "",
        "stage": "get_extraction_details",
        "dependencies": [],
        "skip": "0",
        "params": {
          "path": "extraction_data",
          "function": "user_defined_function",
          "args": {
            "function_name": "get_extraction_data",
            "fields": [
              "document.link",
              "document_text_content",
              "document_text"
            ]
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "If customer name is empty, set ordered by name as the customer name",
    "stage": "set_customer_name_from_ordered_by_name",
    "description": "",
    "dependencies": [],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "ordered_by_name",
          "operator": "!=",
          "value": {
            "path": "sender_details.sent_by_name"
          }
        },
        {
          "path": "customer_name",
          "operator": "not exists"
        }
      ]
    },
    "actions": [
      {
        "action": "set",
        "description": "",
        "stage": "set_customer_name_from_ordered_by_name",
        "dependencies": [],
        "skip": "0",
        "params": {
          "path": "customer_name",
          "value": "",
          "valueFromField": "ordered_by_name",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Set default values for consignment sales, TDR order, staff order and email body orders",
    "stage": "set_default_order_types",
    "description": "",
    "dependencies": [],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "",
        "stage": "set_order_type_consignment_sales",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "is_consignment_sales",
          "value": "No",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      },
      {
        "description": "",
        "stage": "set_order_type_tdr",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "is_tdr_order",
          "value": "No",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      },
      {
        "description": "",
        "stage": "set_order_type_staff",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "is_staff_order",
          "value": "No",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      },
      {
        "description": "",
        "stage": "set_order_type_email_body",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "is_email_body_order",
          "value": "No",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Check if is a TDR order",
    "stage": "tdr_order_check",
    "description": "Checks if the email subject contains the word 'TDR'",
    "dependencies": [
      "get_extraction_details"
    ],
    "skip": "0",
    "condition": {
      "path": "extraction_data.document_text_content",
      "operator": "matches",
      "value": "Email Subject:.*\\bTDR\\b"
    },
    "actions": [
      {
        "description": "",
        "stage": "set_as_tdr_order",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "is_tdr_order",
          "value": "Yes",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      },
      {
        "action": "function",
        "stage": "get_tdr_details",
        "description": "We get TDR details from template",
        "dependencies": [],
        "skip": "0",
        "params": {
          "path": "extraction_data.document_text_content",
          "function": "parse_template",
          "args": {
            "template": "TDR {{tdr_name}}\\s*(?:-|–|—|−|‒)\\s*Order for {{customer_name}}\\s*\\n",
            "config": [
              {
                "non_greedy": "1",
                "only_numbers": "0",
                "only_letters": "0"
              },
              {
                "non_greedy": "1",
                "only_numbers": "0",
                "only_letters": "0"
              }
            ],
            "modifiers": "i"
          },
          "newField": "tdr_template_data",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Check if is a Staff order",
    "stage": "staff_order_check",
    "description": "Checks if the email subject contains the word 'Staff'",
    "dependencies": [
      "get_extraction_details"
    ],
    "skip": "0",
    "condition": {
      "path": "extraction_data.document_text_content",
      "operator": "matches",
      "value": "Email Subject:.*\\bStaff\\b"
    },
    "actions": [
      {
        "description": "",
        "stage": "set_as_staff_order",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "is_staff_order",
          "value": "Yes",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "For TDR orders that follow the template, we set template values as customer name",
    "stage": "set_tdr_as_customer",
    "description": "Checks if the email subject contains the word 'TDR'",
    "dependencies": [
      "get_tdr_details"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "is_tdr_order",
          "operator": "==",
          "value": "Yes"
        },
        {
          "path": "tdr_template_data.customer_name",
          "operator": "exists"
        },
        {
          "path": "tdr_template_data.tdr_name",
          "operator": "exists"
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "set_tdr_as_customer",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "customer_name",
          "value": "",
          "valueFromField": "tdr_template_data.tdr_name",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "For orders coming from Tsebo, we ensure customer name is always Tsebo and not the client they are making the order on behalf of",
    "stage": "handle_tsebo_orders_customer_name",
    "description": "",
    "dependencies": [
      "get_extraction_details"
    ],
    "skip": "0",
    "condition": {
      "path": "extraction_data.document_text",
      "operator": "matches",
      "value": "tsebo facilities"
    },
    "actions": [
      {
        "description": "",
        "stage": "handle_tsebo_orders_customer_name",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "customer_name",
          "value": "TSEBO FACILITIES SOLUTIONS",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "For orders coming from Kwetu, we ensure customer name is always Kwetu and not the supply to",
    "stage": "handle_kwetu_orders_customer_name",
    "description": "",
    "dependencies": [
      "get_extraction_details"
    ],
    "skip": "0",
    "condition": {
      "path": "extraction_data.document_text",
      "operator": "matches",
      "value": "(?=.*(KWETU))(?=.*(CURIO COLLECTION BY HILTON))"
    },
    "actions": [
      {
        "description": "",
        "stage": "handle_kwetu_orders_customer_name",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "customer_name",
          "value": "KWETU CURIO COLLECTION BY HILTON",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "For orders coming from Loswani, we ensure customer name is always Loswani and not the golden eagle spur",
    "stage": "handle_loswani_orders_customer_name",
    "description": "",
    "dependencies": [
      "get_extraction_details"
    ],
    "skip": "0",
    "condition": {
      "path": "extraction_data.document_text",
      "operator": "matches",
      "value": "(?=.*(Golden\\s*Eagle\\s*Spur))(?=.*(Loswani))"
    },
    "actions": [
      {
        "description": "",
        "stage": "handle_loswani_orders_customer_name",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "customer_name",
          "value": "LOSWANI COUNTY HOTELS",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Set delivery locations for Quick Mart",
    "stage": "set_quickmart_delivery_location",
    "description": "We check some of the branches with similar names and set based on branch code",
    "dependencies": [],
    "skip": "0",
    "condition": {
      "path": "customer_name",
      "operator": "contains",
      "value": "QUICK MART"
    },
    "actions": [
      {
        "action": "function",
        "stage": "get_quickmart_branch_code",
        "description": "We get the text before the first dash",
        "dependencies": [],
        "skip": "0",
        "params": {
          "path": "purchase_order_number",
          "function": "regex_extract",
          "args": {
            "pattern": "^[^-]*",
            "capture_group_number": "0",
            "is_case_sensitive": "0",
            "return_subject_on_null": "1"
          },
          "newField": "quickmart_branch_code",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Map delivery locations",
        "stage": "get_quickmart_delivery_location",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "quickmart_branch_code",
          "value": "",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [
            {
              "condition": {
                "operator": "==",
                "value": "011"
              },
              "value": "QUICK MART EASTERN BYPASS",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "==",
                "value": "019"
              },
              "value": "QUICKMART EASTERN BYPASS 2 (FRESH AND EASY)",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "==",
                "value": "055"
              },
              "value": "QUICKMART MACHAKOS EXPRESS",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "==",
                "value": "056"
              },
              "value": "QUICKMART MACHAKOS PIONEER",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "==",
                "value": "024"
              },
              "value": "QUICKMART OUTERING 1",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "==",
                "value": "065"
              },
              "value": "QUICKMART OUTERING 2",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "==",
                "value": "020"
              },
              "value": "QUICKMART UTAWALA EXPRESS",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "==",
                "value": "027"
              },
              "value": "QUICKMART UTAWALA MAIN",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "==",
                "value": "012"
              },
              "value": "QUICKMART RUIRU",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            }
          ],
          "newField": "delivery_location"
        }
      }
    ]
  },
  {
    "rule": "Combine customer name and delivery location to be the new customer name for Majid",
    "stage": "set_majid_customer_name",
    "description": "Handles customer name changes for Majid orders. Every branch is a customer",
    "dependencies": [],
    "skip": "0",
    "condition": {
      "operator": "OR",
      "conditions": [
        {
          "path": "customer_name",
          "operator": "contains",
          "value": "MAJID"
        },
        {
          "path": "customer_name",
          "operator": "contains",
          "value": "CARREFOUR"
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "change_majid_customer_name",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "customer_name",
          "value": "MAJID",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      },
      {
        "action": "function",
        "stage": "concat_majid_delivery_location_to_customer_name",
        "description": "",
        "dependencies": [],
        "skip": "0",
        "params": {
          "path": "",
          "function": "concat",
          "args": {
            "data_to_concat": [
              {
                "path": "customer_name"
              },
              {
                "path": "delivery_location"
              }
            ],
            "separator": "",
            "enclosure": "brackets"
          },
          "newField": "customer_name",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Combine customer name and delivery location to be the new customer name for kuku shops",
    "description": "",
    "stage": "set_kuku_shops_customer_name",
    "dependencies": [],
    "skip": "1",
    "condition": {
      "path": "customer_name",
      "operator": "in list any",
      "value": [
        "KUKU SHOP"
      ]
    },
    "actions": [
      {
        "action": "function",
        "stage": "set_kuku_shops_customer_name",
        "description": "",
        "dependencies": [],
        "skip": "0",
        "params": {
          "path": "",
          "function": "concat",
          "args": {
            "data_to_concat": [
              {
                "path": "customer_name"
              },
              {
                "path": "delivery_location"
              }
            ],
            "separator": "",
            "enclosure": ""
          },
          "newField": "customer_name",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "For Radisson Blue, check if arboretum or main branch",
    "description": "",
    "stage": "set_radisson_blue_customer_name",
    "dependencies": [
      "get_extraction_details"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name",
      "operator": "contains",
      "value": "RADISSON"
    },
    "actions": [
      {
        "description": "Set value",
        "stage": "set_radisson_blue_customer_name",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "extraction_data.document_text",
          "value": "",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [
            {
              "condition": {
                "operator": "matches",
                "value": "NAIROBI ARBORETUM"
              },
              "value": "RADISSON BLU (NAIROBI ARBORETUM)",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "not matches",
                "value": "NAIROBI ARBORETUM"
              },
              "value": "RADISSON BLU (ELDGON ROAD DEV. LTD)",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            }
          ],
          "newField": "customer_name"
        }
      }
    ]
  },
  {
    "rule": "Hemingways Orders",
    "description": "For Hemingways orders where customer branch is not included in the customer name, we add delivery location to the customer name",
    "stage": "set_hemingways_customer_name",
    "dependencies": [],
    "skip": "0",
    "condition": {
      "path": "customer_name",
      "operator": "==",
      "value": "HEMINGWAYS"
    },
    "actions": [
      {
        "description": "Get Delivery Location",
        "stage": "hemingways_get_delivery_location",
        "dependencies": [],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "delivery_location",
          "function": "regex_mapper_multiple",
          "args": {
            "mappers": [
              {
                "description": "",
                "order": "1",
                "data": {
                  "pattern": "Deep Freezer Store\\s*-\\s*HWL",
                  "modifiers": "i",
                  "replacements": [
                    {
                      "pattern": ".*",
                      "replacement": "WATAMU"
                    }
                  ]
                }
              },
              {
                "description": "",
                "order": "2",
                "data": {
                  "pattern": "Deep Freezer Store\\s*-\\s*HOL",
                  "modifiers": "i",
                  "replacements": [
                    {
                      "pattern": ".*",
                      "replacement": "OL SEKI"
                    }
                  ]
                }
              },
              {
                "description": "",
                "order": "3",
                "data": {
                  "pattern": "Deep Freezer Store\\s*-\\s*HNL",
                  "modifiers": "i",
                  "replacements": [
                    {
                      "pattern": ".*",
                      "replacement": "NAIROBI"
                    }
                  ]
                }
              },
              {
                "description": "",
                "order": "4",
                "data": {
                  "pattern": "Deep Freezer Store\\s*-\\s*HEL",
                  "modifiers": "i",
                  "replacements": [
                    {
                      "pattern": ".*",
                      "replacement": "EDEN"
                    }
                  ]
                }
              }
            ],
            "sort_by_order": "1"
          },
          "newField": "hemingways_delivery_location",
          "strict": "1",
          "condition": ""
        }
      },
      {
        "description": "Append the delivery location to customer name",
        "stage": "append_hemingways_delivery_location_to_customer_name",
        "dependencies": [
          "hemingways_get_delivery_location"
        ],
        "skip": "0",
        "action": "function",
        "params": {
          "path": "",
          "function": "append",
          "args": {
            "data_to_append": [
              {
                "path": "customer_name"
              },
              {
                "path": "hemingways_delivery_location"
              }
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "customer_name",
          "strict": "1",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "For chandarana butcheries, Combine customer name and delivery location to be the new customer name and set whether consignment sales or not",
    "description": "Handles customer name changes for Chandarana orders. Every branch is a customer",
    "stage": "set_chandarana_butchery_customer_name",
    "dependencies": [],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name",
          "operator": "contains",
          "value": "CHANDARANA"
        },
        {
          "operator": "OR",
          "conditions": [
            {
              "path": "customer_name",
              "operator": "contains",
              "value": "BUTCHERY"
            },
            {
              "path": "customer_name",
              "operator": "contains",
              "value": "BUTCHERIES"
            },
            {
              "path": "purchase_order_number",
              "operator": "not exists"
            }
          ]
        }
      ]
    },
    "actions": [
      {
        "description": "We extract chandarana butchery branch",
        "stage": "get_chandarana_butchery_branch",
        "dependencies": [
          "get_extraction_details"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "extraction_data.document_text",
          "function": "regex_extract",
          "args": {
            "pattern": "[\\r\\n]\\s*chandarana butchery\\s*-\\s*(.*?)\\s*[\\r\\n]",
            "capture_group_number": "1",
            "is_case_sensitive": "0",
            "return_subject_on_null": "0"
          },
          "newField": "chandarana_butchery_branch",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "If delivery location is chandarana butchery or empty, we set the chandarana_butchery_branch",
        "stage": "set_chandarana_butchery_delivery_location_from_branch",
        "dependencies": [
          "get_chandarana_butchery_branch"
        ],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "delivery_location",
          "value": "",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [
            {
              "condition": {
                "operator": "OR",
                "conditions": [
                  {
                    "operator": "==",
                    "value": "chandarana butchery"
                  },
                  {
                    "operator": "not exists"
                  }
                ]
              },
              "value": "",
              "valueFromField": "chandarana_butchery_branch",
              "use_data_as_path_value": "1"
            }
          ],
          "newField": ""
        }
      },
      {
        "description": "We set customer name for chandarana butcheies based on the name and branch",
        "stage": "set_chandarana_butchery_customer_name",
        "dependencies": [
          "set_chandarana_butchery_delivery_location_from_branch"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "",
          "function": "concat",
          "args": {
            "data_to_concat": [
              {
                "path": "customer_name"
              },
              {
                "path": "delivery_location"
              }
            ],
            "separator": "",
            "enclosure": "brackets"
          },
          "newField": "customer_name",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "For chandarana butcheries, set whether consignment sales or not",
    "description": "",
    "stage": "chandarana_consignment_sales",
    "dependencies": [
      "get_extraction_details"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "extraction_data.document.link",
          "operator": "exists"
        },
        {
          "path": "customer_name",
          "operator": "contains",
          "value": "CHANDARANA"
        },
        {
          "operator": "OR",
          "conditions": [
            {
              "path": "customer_name",
              "operator": "contains",
              "value": "BUTCHERY"
            },
            {
              "path": "customer_name",
              "operator": "contains",
              "value": "BUTCHERIES"
            },
            {
              "path": "purchase_order_number",
              "operator": "not exists"
            }
          ]
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "set_chandarana_consignment_sales",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "is_consignment_sales",
          "value": "Yes",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Check if is a email body order",
    "description": "Checks if the order has no attachment",
    "stage": "email_body_order_check",
    "dependencies": [
      "get_extraction_details"
    ],
    "skip": "0",
    "condition": {
      "path": "extraction_data.document.link",
      "operator": "not exists"
    },
    "actions": [
      {
        "description": "",
        "stage": "set_as_email_body_order",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "is_email_body_order",
          "value": "Yes",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Combine order by name, customer name and delivery location to be the new customer name for email body orders that are not TDR, Staff, Consignment Sales or butcheries",
    "description": "",
    "stage": "set_email_body_order_customer_name",
    "dependencies": [
      "tdr_order_check",
      "staff_order_check",
      "email_body_order_check",
      "set_chandarana_consignment_sales"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "is_email_body_order",
          "operator": "==",
          "value": "Yes"
        },
        {
          "path": "is_tdr_order",
          "operator": "==",
          "value": "No"
        },
        {
          "path": "is_staff_order",
          "operator": "==",
          "value": "No"
        },
        {
          "path": "is_consignment_sales",
          "operator": "==",
          "value": "No"
        },
        {
          "path": "customer_name",
          "operator": "not matches",
          "value": "BUTCHER(Y|IES)"
        }
      ]
    },
    "actions": [
      {
        "description": "We get Email subject",
        "stage": "get_email_subject",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "extraction_data.document_text_content",
          "function": "parse_template",
          "args": {
            "template": "Email Subject:{{email_subject}}\\s*[\\n\\r]",
            "config": [
              {
                "non_greedy": "1",
                "only_numbers": "0",
                "only_letters": "0"
              }
            ],
            "modifiers": "i"
          },
          "newField": "email_subject",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "set_email_body_order_customer_name",
        "dependencies": [
          "get_email_subject"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "",
          "function": "append",
          "args": {
            "data_to_append": [
              {
                "path": "email_subject.email_subject"
              },
              "(",
              {
                "path": "customer_name"
              },
              {
                "path": "ordered_by_name"
              },
              {
                "path": "delivery_location"
              },
              ")"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "customer_name",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get customers list",
    "description": "",
    "stage": "get_customers_list",
    "dependencies": [],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "",
        "stage": "get_customers_list",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "customers_list",
          "function": "user_defined_function",
          "args": {
            "function_name": "get_master_data",
            "type": "customers"
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Filter out inactive customer accounts",
        "stage": "remove_inactive_customers",
        "dependencies": [
          "get_customers_list"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "customers_list",
          "function": "filter",
          "args": {
            "filter_criteria": {
              "term": [
                "PC00980"
              ],
              "mode": "not in",
              "key": "No",
              "similarity_threshold": "",
              "term_exclusion_pattern": "",
              "value_exclusion_pattern": ""
            }
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "For TDR order, filter out only TDR customers",
    "description": "",
    "stage": "get_tdr_customer_accounts",
    "dependencies": [],
    "skip": "0",
    "condition": {
      "path": "is_tdr_order",
      "operator": "==",
      "value": "Yes"
    },
    "actions": [
      {
        "description": "Filter only TDR customers",
        "stage": "get_tdr_customer_accounts",
        "dependencies": [
          "get_customers_list"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "customers_list",
          "function": "filter",
          "args": {
            "filter_criteria": {
              "term": [
                "PC03105",
                "PC03106",
                "PC01891",
                "PC02630",
                "PC02970",
                "PC02302",
                "PC03151",
                "PC02566",
                "PC02655",
                "PC03194",
                "PC00980",
                "PC03195",
                "PC02565",
                "PC01894",
                "PC01896",
                "PC01899",
                "PC03171",
                "PC02635",
                "PC02693"
              ],
              "mode": "in",
              "key": "No",
              "similarity_threshold": "",
              "term_exclusion_pattern": "",
              "value_exclusion_pattern": ""
            }
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "For chandarana supermarket, only get the supermarkets by filtering customers list to remove butcheries",
    "description": "",
    "stage": "get_supermarket_customers",
    "dependencies": [],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name",
          "operator": "contains",
          "value": "CHANDARANA"
        },
        {
          "path": "customer_name",
          "operator": "contains",
          "value": "SUPERMARKET"
        },
        {
          "path": "purchase_order_number",
          "operator": "exists"
        }
      ]
    },
    "actions": [
      {
        "action": "function",
        "stage": "get_supermarket_customers",
        "description": "Filter only supermarket customers",
        "dependencies": [
          "get_customers_list"
        ],
        "skip": "0",
        "params": {
          "path": "customers_list",
          "function": "filter",
          "args": {
            "filter_criteria": {
              "term": "Supermarkets",
              "mode": "==",
              "key": "Customer_Category",
              "similarity_threshold": "",
              "term_exclusion_pattern": "",
              "value_exclusion_pattern": ""
            }
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "For chandarana butcheries, only get the butcheries by filtering customers list to remove supermarkets",
    "description": "",
    "stage": "get_chandarana_butchery_customers",
    "dependencies": [],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name",
          "operator": "contains",
          "value": "CHANDARANA"
        },
        {
          "operator": "OR",
          "conditions": [
            {
              "path": "customer_name",
              "operator": "contains",
              "value": "BUTCHERY"
            },
            {
              "path": "customer_name",
              "operator": "contains",
              "value": "BUTCHERIES"
            },
            {
              "path": "purchase_order_number",
              "operator": "not exists"
            }
          ]
        }
      ]
    },
    "actions": [
      {
        "description": "Filter only butchery customers for chandarana",
        "stage": "get_chandarana_butchery_customers",
        "dependencies": [
          "get_customers_list"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "customers_list",
          "function": "filter",
          "args": {
            "filter_criteria": {
              "operator": "AND",
              "conditions": [
                {
                  "term": "Butcheries",
                  "mode": "==",
                  "key": "Customer_Category",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "Chandarana",
                  "mode": "contains",
                  "key": "Name",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                }
              ]
            }
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "For orders coming from butcheries, filter only butcheries, restaurants and kuku shops",
    "description": "",
    "stage": "get_other_butchery_customers",
    "dependencies": [],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "purchase_order_number",
          "operator": "not exists"
        },
        {
          "operator": "OR",
          "conditions": [
            {
              "path": "customer_name",
              "operator": "in list any",
              "value": [
                "BUTCHERY",
                "BUTCHERIES"
              ]
            }
          ]
        }
      ]
    },
    "actions": [
      {
        "action": "function",
        "description": "Filter only butchery customers for chandarana and kenchic",
        "stage": "get_other_butchery_customers",
        "dependencies": [
          "get_customers_list"
        ],
        "skip": "0",
        "params": {
          "path": "customers_list",
          "function": "filter",
          "args": {
            "filter_criteria": {
              "operator": "OR",
              "conditions": [
                {
                  "term": "Butcheries",
                  "mode": "==",
                  "key": "Customer_Category",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "Restaurants",
                  "mode": "==",
                  "key": "Customer_Category",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "Kuku Shop",
                  "mode": "==",
                  "key": "Customer_Category",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                }
              ]
            }
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Match customer",
    "description": "",
    "stage": "match_customer",
    "dependencies": [
      "get_customers_list"
    ],
    "skip": "0",
    "condition": {
      "path": "customers_list",
      "operator": "exists"
    },
    "actions": [
      {
        "description": "",
        "stage": "order_customer_name_transformations",
        "dependencies": [
          "set_email_body_order_customer_name",
          "set_chandarana_consignment_sales"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "customer_name",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "\\b(Quickmart)\\b": "Quick Mart",
                "\\b(EASTMATT)\\b": "EASTLEIGH MATTRESSES LIMITED",
                "\\bPIW\\b": "Pride Inn Westlands",
                "\\bPrideInn\\b": "Pride Inn",
                "\\b((?:SM|HM)\\s+KEN\\s+[A-Z]{3})\\b": "MAJID",
                "\\bCARREFOUR MARKET": "MAJID",
                "^(?!.*\\bhotel\\b).*\\b(fairview)(.*)\\b": "$1 HOTEL",
                "\\b(HM KEN NBO|SM KEN KIS)\\b": "",
                "\\bKUKU SHOP\\b": "(KUKU SHOP)",
                "\\b(que)(\\s*)(pasa)\\b": "$1$3",
                "(big\\s+square\\s+central\\s+stores)": "INTERSTRAT LTD"
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "erp_customer_name_transformations",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "customers_list.*.Name",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "\\b(CHANDARANA BUTCHERY\\s*\\-\\s*KISUMU)\\b": "$1 (THE WESTEND)",
                "\\b(CHANDARANA BUTCHERY\\s*\\-\\s*NYALI|CHANDARANA BUTCHERY\\s*\\-\\s*ADLIFE)\\b": "$1 (PLAZA)",
                "\\bRAPHTA\\b": "RHAPTA",
                "PRIDE INN HOTELS AND INVESTMENT LTD": "PRIDE INN HOTELS AND INVESTMENT LTD (WESTLANDS)",
                "^(?=.*\\bMAJID\\b).*\\b(GALLERIA|TWO RIVERS|GARDEN CITY|THE JUNCTION|WESTGATE|SOUTHFIELD|KAREN HUB|NYALI|KISUMU UNITED)\\b": "$0 MALL",
                "^(?=.*\\bMAJID\\b).*\\b(HUB)\\b": "$0 MALL, KAREN",
                "KRYSTAL ASALI LIMITED": "SHAMBA CAFE AND SHOP (KRYSTAL ASALI LIMITED)",
                "GOLDEN JUBILEE LIMITED": "PULLMAN AND MERCURE (GOLDEN JUBILEE LIMITED)",
                "BETTY KUKU SHOP": "BETTY KUKU SHOP (BETTY WANJIRU)",
                "NEW TIMES HOLDING LIMITED": "RONGAI EATING/EATERIES HOUSE (NEW TIMES HOLDING LIMITED)",
                "KUKU SHOP MEMBLY - RUIRU BYPASS": "MEMBLY KUKU SHOP",
                "\\bMANA\\b": "MAMA",
                "\\bPOULET\\b": "",
                "\\bCHICKEN PALOUR\\b": "Kuku Shop",
                "\\bKUKU SHOP\\b": "(KUKU SHOP)",
                "SAFARI PARK": "SAFARI PARK HOTEL",
                "LEISURE PARK DEVELOPMENT LTD-T/A RADISSON ARBRETUM": "RADISSON BLU (NAIROBI ARBORETUM)",
                "(OL\\s+SEKI\\s+LIMITED)": "HEMINGWAYS $1",
                "^(HEMINGWAYS)\\s+(RESORT)$": "$1 WATAMU $2"
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Make customer name upper case to match the search list",
        "stage": "uppercase_order_customer_name",
        "dependencies": [
          "order_customer_name_transformations"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "customer_name",
          "function": "strtoupper",
          "args": "",
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "match_customer",
        "dependencies": [
          "uppercase_order_customer_name",
          "erp_customer_name_transformations"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "customer_name",
          "function": "user_defined_function",
          "args": {
            "function_name": "semantic_search",
            "corpus": {
              "path": "customers_list"
            },
            "corpus_search_key": "Name",
            "corpus_id_key": "No",
            "master_data_type": "customers",
            "similarity_threshold": "1",
            "stop_words": [
              "limited",
              "ltd",
              "P.O BOX",
              "Nairobi",
              "Kenya"
            ],
            "model": "adaV3"
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get Item Sections for Naivas",
    "description": "",
    "stage": "get_naivas_item_sections",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name.meta_data.value",
      "operator": "contains",
      "value": "NAIVAS"
    },
    "actions": [
      {
        "description": "We check item packaging as well as descriptions to identify the section",
        "stage": "get_naivas_item_sections",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "value": "",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [
            {
              "condition": {
                "operator": "AND",
                "conditions": [
                  {
                    "operator": "in list any",
                    "value": [
                      "(\\d+)\\s*(G|GM|GMS|KG|KGS|PC|PCS)"
                    ]
                  }
                ]
              },
              "value": "Shop",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "AND",
                "conditions": [
                  {
                    "operator": "contains",
                    "value": "NAIVAS"
                  },
                  {
                    "operator": "not contains",
                    "value": "NAIVAS DELI"
                  }
                ]
              },
              "value": "Butchery",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "AND",
                "conditions": [
                  {
                    "operator": "in list any",
                    "value": [
                      "NAIVAS DELI",
                      "KENCHIC CAT",
                      "HUNGARIAN CHOMA SAUSAGES 1KG",
                      "\b(PERKG|PER KG|P/KG|PKG|PK|/KG|PER 500G)\b"
                    ]
                  }
                ]
              },
              "value": "Deli",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            }
          ],
          "newField": "items.*.section"
        }
      }
    ]
  },
  {
    "rule": "Get Item Sections for Quick Mart",
    "description": "",
    "stage": "get_quickmart_item_sections",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name.meta_data.value",
      "operator": "contains",
      "value": "QUICK MART"
    },
    "actions": [
      {
        "description": "",
        "stage": "get_quickmart_item_sections",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "value": "",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [
            {
              "condition": {
                "operator": "AND",
                "conditions": [
                  {
                    "operator": "contains",
                    "value": "FD-"
                  },
                  {
                    "operator": "not contains",
                    "value": "Hungarian Choma Sausage"
                  }
                ]
              },
              "value": "Shop",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "OR",
                "conditions": [
                  {
                    "operator": "AND",
                    "conditions": [
                      {
                        "operator": "contains",
                        "value": "RM-"
                      },
                      {
                        "operator": "not contains",
                        "value": "Cripsy Kuku Bites"
                      }
                    ]
                  },
                  {
                    "operator": "AND",
                    "conditions": [
                      {
                        "operator": "contains",
                        "value": "FR-"
                      },
                      {
                        "operator": "not contains",
                        "value": "Hungarian Choma Sausage"
                      }
                    ]
                  }
                ]
              },
              "value": "Butchery",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "OR",
                "conditions": [
                  {
                    "operator": "AND",
                    "conditions": [
                      {
                        "operator": "contains",
                        "value": "RM-"
                      },
                      {
                        "operator": "contains",
                        "value": "Cripsy Kuku Bites"
                      }
                    ]
                  },
                  {
                    "operator": "AND",
                    "conditions": [
                      {
                        "operator": "contains",
                        "value": "Hungarian Choma Sausage"
                      }
                    ]
                  }
                ]
              },
              "value": "Deli",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            }
          ],
          "newField": "items.*.section"
        }
      }
    ]
  },
  {
    "rule": "Get Item Sections for Eastmatt",
    "description": "",
    "stage": "get_eastmatt_item_sections",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name.meta_data.value",
      "operator": "contains",
      "value": "EASTLEIGH MATTRESSES"
    },
    "actions": [
      {
        "description": "",
        "stage": "get_eastmatt_item_sections",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "value": "",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [
            {
              "condition": {
                "operator": "AND",
                "conditions": [
                  {
                    "operator": "in list any",
                    "value": [
                      "(\\d+)\\s*(G|GM|GMS|KG|KGS|PC|PCS)"
                    ]
                  }
                ]
              },
              "value": "Shop",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "AND",
                "conditions": [
                  {
                    "operator": "contains",
                    "value": "butchery"
                  }
                ]
              },
              "value": "Butchery",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "AND",
                "conditions": [
                  {
                    "operator": "in list any",
                    "value": [
                      "deli",
                      "catering"
                    ]
                  }
                ]
              },
              "value": "Deli",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            }
          ],
          "newField": "items.*.section"
        }
      }
    ]
  },
  {
    "rule": "Get Item Sections for Cleanshelf",
    "description": "",
    "stage": "get_cleanshelf_item_sections",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name.meta_data.value",
      "operator": "contains",
      "value": "CLEANSHELF"
    },
    "actions": [
      {
        "description": "",
        "stage": "get_cleanshelf_item_sections",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "value": "",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [
            {
              "condition": {
                "operator": "AND",
                "conditions": [
                  {
                    "operator": "in list any",
                    "value": [
                      "(\\d+)\\s*(G|GM|GMS|KG|KGS|PC|PCS)"
                    ]
                  }
                ]
              },
              "value": "Shop",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "OR",
                "conditions": [
                  {
                    "operator": "contains",
                    "value": "butchery"
                  },
                  {
                    "operator": "in list any",
                    "value": [
                      "CAPON (\\d+)\\.(\\d+)-(\\d+)\\.(\\d+)KG"
                    ]
                  }
                ]
              },
              "value": "Butchery",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "AND",
                "conditions": [
                  {
                    "operator": "in list any",
                    "value": [
                      "deli",
                      "catering"
                    ]
                  }
                ]
              },
              "value": "Deli",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            }
          ],
          "newField": "items.*.section"
        }
      }
    ]
  },
  {
    "rule": "Get Item Sections for Majid",
    "description": "",
    "stage": "get_majid_item_sections",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name.meta_data.value",
      "operator": "contains",
      "value": "MAJID"
    },
    "actions": [
      {
        "description": "",
        "stage": "get_majid_item_sections",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "value": "",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [
            {
              "condition": {
                "operator": "AND",
                "conditions": [
                  {
                    "operator": "contains",
                    "value": "NS FRESH CHICKEN"
                  }
                ]
              },
              "value": "Butchery",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "OR",
                "conditions": [
                  {
                    "operator": "contains",
                    "value": "KENBRO"
                  },
                  {
                    "operator": "AND",
                    "conditions": [
                      {
                        "operator": "in list any",
                        "value": [
                          "(\\d+)\\s*(G|GM|GMS|KG|KGS|PC|PCS)"
                        ]
                      },
                      {
                        "operator": "not in list all",
                        "value": [
                          "\\b(NS)\\b",
                          "NS FRESH CHICKEN"
                        ]
                      }
                    ]
                  }
                ]
              },
              "value": "Shop",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            },
            {
              "condition": {
                "operator": "AND",
                "conditions": [
                  {
                    "operator": "not in list all",
                    "value": [
                      "KENBRO",
                      "NS FRESH CHICKEN"
                    ]
                  },
                  {
                    "operator": "OR",
                    "conditions": [
                      {
                        "operator": "AND",
                        "conditions": [
                          {
                            "operator": "in list any",
                            "value": [
                              "\\b(NS)\\b"
                            ]
                          }
                        ]
                      },
                      {
                        "operator": "AND",
                        "conditions": [
                          {
                            "operator": "in list any",
                            "value": [
                              "\\b(PERKG|PER KG|P/KG|PKG|PK|/KG)\\b"
                            ]
                          }
                        ]
                      },
                      {
                        "operator": "AND",
                        "conditions": [
                          {
                            "operator": "not in list all",
                            "value": [
                              "(\\d+)\\s*(G|GM|GMS|KG|KGS|PC|PCS)"
                            ]
                          },
                          {
                            "operator": "not contains",
                            "value": "NS FRESH CHICKEN"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "value": "Deli",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            }
          ],
          "newField": "items.*.section"
        }
      }
    ]
  },
  {
    "rule": "Set default item section for all empty sections as Shop",
    "description": "",
    "stage": "set_default_section",
    "dependencies": [
      "get_naivas_item_sections",
      "get_quickmart_item_sections",
      "get_eastmatt_item_sections",
      "get_cleanshelf_item_sections",
      "get_majid_item_sections"
    ],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "",
        "stage": "set_default_section",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "items.*.section",
          "value": "",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [
            {
              "condition": {
                "operator": "not exists"
              },
              "value": "Shop",
              "valueFromField": "",
              "use_data_as_path_value": "1"
            }
          ],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Item transformations",
    "description": "",
    "stage": "item_transformations",
    "dependencies": [],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "",
        "stage": "item_make_selling_quantity_absolute",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.unit_of_measure.*.selling_quantity",
          "function": "absolute_value",
          "args": "",
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "action": "function",
        "stage": "item_add_packaging_to_description",
        "description": "Append packaging to description",
        "dependencies": [],
        "skip": "0",
        "params": {
          "path": "items",
          "function": "map",
          "args": {
            "path": "",
            "function": "append",
            "args": {
              "data_to_append": [
                "[",
                {
                  "path": "pack_configuration.pack_size"
                },
                "x",
                {
                  "path": "pack_configuration.unit_size"
                },
                "]"
              ],
              "separator": "",
              "use_data_as_path_value": "0",
              "value_key": "description"
            },
            "newField": "",
            "strict": "0",
            "condition": {
              "operator": "AND",
              "conditions": [
                {
                  "path": "pack_configuration.pack_size",
                  "operator": "exists"
                },
                {
                  "path": "pack_configuration.pack_size",
                  "operator": "!=",
                  "value": "0"
                },
                {
                  "path": "pack_configuration.unit_size",
                  "operator": "exists"
                },
                {
                  "path": "pack_configuration.unit_size",
                  "operator": "!=",
                  "value": "0"
                },
                {
                  "operator": "not matches",
                  "path": "description",
                  "value": "\\d+\\s*(?:G|GM|GMS|KG|KGS|PC|PCS)"
                }
              ]
            }
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "action": "function",
        "description": "",
        "stage": "item_transform_description",
        "dependencies": [],
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "^-?\\d+(\\.\\d+)?$": "Capon $0",
                "([A-Za-z])(?:\\.?)(\\d)": "$1 $2$3",
                "(C\\.)(\\w+)": "Chicken $2",
                "\\b(cat)\\b": "Catering",
                "\\b(cap|caps)\\b": "Capon",
                "(capons?.*?)(staff)": "$1 catering",
                "^(whole chicken|chicken whole)$": "Capon",
                "^(1/4|1/2) (chicken|CHICIKEN)$": "Capon $1 cut",
                "Hungerian": "Hungarian",
                "^lamb$": "Lamb Set",
                "^(?!.*\\bcapon|kenchic\\b).*\\b(catering)\\b": "Capon $0",
                "(CAPON.*?)(1)\\.?([1-8])(?!\\s*\\d*KG)": "$1$2.$3KG",
                "\\b(CAPON\\s*11)\\b": "CAPON 1.1KG",
                "\\b(CAPON\\s*12)\\b": "CAPON 1.2KG",
                "\\b(CAPON\\s*13)\\b": "CAPON 1.3KG",
                "\\b(CAPON\\s*14)\\b": "CAPON 1.4KG",
                "\\b(CAPON\\s*15)\\b": "CAPON 1.5KG",
                "\\b(CAPON\\s*16)\\b": "CAPON 1.6KG",
                "\\b(CAPON\\s*18)\\b": "CAPON 1.8KG",
                "\\bCAPON NO\\.?\\s*(\\d)(\\d)\\b": "CAPON $1.$2KG",
                "^(?=.*\\b(hand wrap|handwrap|capon)\\b).*(\\d+\\.\\d+)(?!\\s*KG)": "$0KG",
                "\\b(B/OFF|B/0FF|B/LESS|BONE OFF|BONELES)\\b": "BONELESS",
                "\\b(C/BITE)\\b": "CHICKEN BITE",
                "\\b(BREASTBONE OFF)\\b": "BREAST BONELESS",
                "\\b(C/DRUMSTICKS)\\b": "CHICKEN DRUMSTICKS",
                "Thigh in": "Thigh Bone In",
                "Thigh off": "Thigh Boneless",
                "\\b(BONE/IN|B/IN)\\b": "BONE IN",
                "\\b(W/SKIN)\\b": "SKIN ON",
                "\\b(R/ON)\\b": "RIND ON",
                "\\b(PER PK)\\b": "(PER PACK)",
                "\\b(PER PC)\\b": "(PER PIECE)",
                "\\b(PERKG|PER KG|P/KG|PKG|PK|/KG)\\b": "(PER KG)",
                "/KG": "(PER KG)",
                "NAIVAS CHICKEN LIVER": "FRESH LIVER 500GMS",
                "NAIVAS CHICKEN GIZZARD": "FRESH GIZZARD 500GMS",
                "NAIVAS CHICKEN BREAST": "BREAST BONE OFF 500GMS",
                "NAIVAS CHICKEN DRUMSTICK": "CHICKEN DRUMSTICKS 500GMS",
                "CHICKEN GIZZARD": "GIZZARDS",
                "CHICKEN LIVER": "LIVER",
                "LAMB SCHOPS": "LAMB CHOPS",
                "\\b(WO|W/O)\\b": "WITHOUT",
                "\\+GIBLET": "WITH GIBLET",
                "FRESH KENCHIC WHOLE CHICKEN": "CHANDARANA FRESH CAPON PUNNET WITHOUT GIBLET(1.15-1.22)",
                "NS FRESH CHICKEN MAX (\\d+\\.\\d+) KG": "CAPON FRESH BUTCHERY (PER KG)",
                "Rumpsteak": "Rump Steak",
                "Thickflank": "Thick Flank",
                "Silverside": "Silver Side",
                "Oxtail": "Ox tail",
                "Shinon": "Shin on",
                "Topside": "Top Side",
                "DOG MEAT": "PET FOOD",
                "(SPRING CHICKEN|CHICKEN SPRINGS|SPRING CAPON|SPRING)": "SPRINGS",
                "(CHICKEN|CHICK|CHICK.|CKN|CHKN|CKEN)": "(CHICKEN)",
                "\\bSTEW \\(PER 1KG\\)\\b": "STEW",
                "\\b(BMINCE)\\b": "BEEF MINCE",
                "(M&S|M/SPICY)": "MILD AND SPICY",
                "\\b(M\\.)(\\s*)": "MARINATED $2",
                "BEEF": "(BEEF)",
                "BURGED": "BURGER",
                "AVERAGE WEIGHT": "",
                "(H\\.P\\.?)": "",
                "(\\d+)\\s*(G|GM|GMS|KG|KGS|PC|PCS)": "$1$2",
                "\\bPL(.*?)(?=\\n|$)\\b": "",
                "\\(?PLU NO \\d+\\)?\\s*": "",
                "^(?!.*\\b1/4\\b).*\\b(quarter)\\b": "$0 (1/4)",
                "\\b(1/2)\\b": "HALF (1/2)",
                "\\b(1/4)\\b": "QUARTER (1/4)",
                "(\\S)&(\\S)": "$1 & $2",
                "^(?=.*\\b(marinated capon)\\b)(.*)(\\d+\\.?\\d+?KG)\\b": "$2",
                "\\bSmokies\\b": "Smoked",
                "^(?!.*\\b(\\d+)\\s*(G|GM|GMS|KG|KGS|PC|PCS)?\\b).*\\bsmoked sausage(?:s)?\\b": "$0 1KG",
                "^(?!.*\\bsausage|sausages\\b).*\\b(smoked)\\b": "$1 sausage 1KG",
                "^(?!.*\\bchoma|sausage|sausages\\b).*\\b(hungarian)\\b": "$0 Choma sausage 1KG",
                "^(?!.*\\bKuku\\b).*\\b(New Assorted)\\b": "$0 Kuku",
                "\\bTHICH\\b": "THIGH",
                "\\b(DELI)\\b": "CATERING",
                "\\b(CAPON\\s*1\\.1KG)\\b": "CATERING CAPON 1.1KG"
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Add the word chicken to all items other than beef products",
        "action": "function",
        "stage": "item_append_word_chicken",
        "dependencies": [
          "item_transform_description"
        ],
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "append",
          "args": {
            "data_to_append": [
              "(CHICKEN)"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "not in list all",
            "value": [
              "\\bchicken\\b",
              "\\bbeef\\b",
              "\\blamb\\b",
              "\\bgoat",
              "\\bsteak\\b",
              "\\bpork\\b",
              "\\bfillet\\b",
              "\\brump\\b",
              "\\bmince\\b",
              "\\btbone\\b",
              "\\bt bone\\b",
              "\\bt-bone\\b",
              "\\bbiltong\\b",
              "\\brangers\\b",
              "\\bTop side\\b",
              "\\bflank\\b",
              "\\bangus\\b",
              "\\bSilver side\\b",
              "\\bRibeye\\b",
              "\\bOx\\b",
              "\\bTail\\b",
              "\\bBlade\\b",
              "\\bChuck\\b",
              "\\bShin on\\b",
              "\\btenderloin\\b",
              "\\btender loin\\b",
              "\\bStrip\\s*loin\\b",
              "\\bmarrow\\b",
              "\\bsirloin\\b",
              "\\bribs?\\b"
            ]
          }
        }
      },
      {
        "description": "Add the word beef to all items other than chicken products",
        "stage": "item_append_word_beef",
        "dependencies": [
          "item_transform_description"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "append",
          "args": {
            "data_to_append": [
              "(BEEF)"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "OR",
            "conditions": [
              {
                "operator": "AND",
                "conditions": [
                  {
                    "operator": "matches",
                    "value": "chuck|blade|marrow\\s*bone"
                  },
                  {
                    "operator": "not matches",
                    "value": "beef|prime"
                  }
                ]
              }
            ]
          }
        }
      }
    ]
  },
  {
    "rule": "Quickmart item transformations",
    "description": "",
    "stage": "quickmart_item_transformations",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name.meta_data.value",
      "operator": "contains",
      "value": "QUICK MART"
    },
    "actions": [
      {
        "description": "",
        "stage": "set_quickmart_item_state",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "FR-KENC\\w*\\b": "FRESH",
                "RM-KENC\\w*\\b": "FROZEN",
                "FD-KENC\\w*\\b": "FROZEN",
                "FR-": "FRESH-",
                "RM-": "FROZEN-",
                "FD-": "FROZEN-",
                "BURGER TRAY": "BURGER TRAY 400GM",
                "GIZZARDS (PER 1KG) 1KG": "GOZZARDS"
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "quickmart_item_transformations",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "CAPON\\s*\\((\\d*\\.\\d*)-(\\d*\\.\\d*)\\s*KG\\)": "(HANDWRAP) CAPON QUICKMART ($1 - $2)",
                "CAPON\\s*(\\d*\\.\\d*)-(\\d*\\.\\d*)\\s*KG": "(HANDWRAP) CAPON QUICKMART ($1 - $2)",
                "DRUMSTICKS 6PC": "DRUMSTICKS 6PC 700GM"
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "OR",
            "conditions": [
              {
                "operator": "AND",
                "conditions": [
                  {
                    "operator": "contains",
                    "value": "capon"
                  },
                  {
                    "operator": "contains",
                    "value": "1."
                  }
                ]
              },
              {
                "operator": "AND",
                "conditions": [
                  {
                    "operator": "contains",
                    "value": "DRUMSTICKS 6PC"
                  },
                  {
                    "operator": "not contains",
                    "value": "700"
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "description": "",
        "stage": "quickmart_items_append_customer_name",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "append",
          "args": {
            "data_to_append": [
              "(FOR QUICKMART)"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "AND",
            "conditions": [
              {
                "operator": "not in list all",
                "value": [
                  "QUICKMART",
                  "QUICK MART",
                  "SPRING",
                  "BREAST BONELESS",
                  "HALAL"
                ]
              },
              {
                "operator": "AND",
                "conditions": [
                  {
                    "operator": "contains",
                    "value": "capon"
                  },
                  {
                    "operator": "not contains",
                    "value": "1.3KGS"
                  }
                ]
              }
            ]
          }
        }
      }
    ]
  },
  {
    "rule": "Majid item transformations",
    "description": "",
    "stage": "majid_item_transformations",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name.meta_data.value",
      "operator": "contains",
      "value": "MAJID"
    },
    "actions": [
      {
        "description": "",
        "stage": "majid_items_add_pkg",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "append",
          "args": {
            "data_to_append": [
              "(PER KG)"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "AND",
            "conditions": [
              {
                "operator": "contains",
                "value": "NS FRESH"
              },
              {
                "operator": "not in list all",
                "value": [
                  "KG",
                  "PKG"
                ]
              }
            ]
          }
        }
      },
      {
        "description": "",
        "stage": "majid_item_transformations",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "NS FRESH": "FRESH",
                "CAPON TRAY": "HANDWRAP CAPON"
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "majid_item_append_customer_name",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "append",
          "args": {
            "data_to_append": [
              "(FOR MAJID)"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "AND",
            "conditions": [
              {
                "operator": "not in list all",
                "value": [
                  "MAJID",
                  "BUTCHERY",
                  "Lemon",
                  "500G"
                ]
              },
              {
                "operator": "in list any",
                "value": [
                  "capon catering|deli",
                  "handwrap"
                ]
              }
            ]
          }
        }
      },
      {
        "description": "",
        "stage": "majid_items_append_chicken_brawn",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "append",
          "args": {
            "data_to_append": [
              "FRESH CHICKEN BRAWN BULK 2 KG"
            ],
            "separator": "-",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "in list all",
            "value": [
              "BRAWN",
              "CHICKEN",
              "KENCHIC",
              "PER KG"
            ]
          }
        }
      }
    ]
  },
  {
    "rule": "Naivas item transformations",
    "description": "",
    "stage": "naivas_item_transformations",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name.meta_data.value",
      "operator": "contains",
      "value": "NAIVAS"
    },
    "actions": [
      {
        "description": "Match NAIVAS FRESH CAPON directly to CAPON FRESH BUTCHERY.",
        "stage": "naivas_item_transformations",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "NAIVAS FRESH CAPON": "FRESH CAPON FRESH BUTCHERY."
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "contains",
            "value": "NAIVAS FRESH CAPON"
          }
        }
      },
      {
        "action": "function",
        "stage": "naivas_item_add_catering_tag",
        "description": "Add catering tag to cat products",
        "dependencies": [],
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "append",
          "args": {
            "data_to_append": [
              "(CATERING)"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "OR",
            "conditions": [
              {
                "operator": "contains",
                "value": "KENCHIC CAT"
              },
              {
                "operator": "contains",
                "value": "NAIVAS DELI"
              }
            ]
          }
        }
      },
      {
        "action": "function",
        "stage": "naivas_item_remove_catering_tags",
        "description": "Remove the unwanted catering tags post renaming",
        "dependencies": [
          "naivas_item_add_catering_tag"
        ],
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "(KENCHIC CAT\\.FROZ\\.|KENCHIC CAT\\.|NAIVAS DELI)": ""
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "Butchery orders that start with NAIVAS, replace the word Naivas with Fresh",
        "stage": "naivas_item_make_butchery_fresh",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "NAIVAS": "FRESH"
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "AND",
            "conditions": [
              {
                "operator": "contains",
                "value": "NAIVAS"
              },
              {
                "operator": "not contains",
                "value": "(FOR NAIVAS)"
              }
            ]
          }
        }
      },
      {
        "description": "",
        "stage": "naivas_item_add_customer_name",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "append",
          "args": {
            "data_to_append": [
              "(FOR NAIVAS)"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "AND",
            "conditions": [
              {
                "operator": "not contains",
                "value": "naivas"
              },
              {
                "operator": "OR",
                "conditions": [
                  {
                    "operator": "contains",
                    "value": "MINCE MEAT"
                  }
                ]
              }
            ]
          }
        }
      }
    ]
  },
  {
    "rule": "Cleanshelf item transformations",
    "description": "",
    "stage": "cleanshelf_item_transformations",
    "dependencies": [],
    "skip": "0",
    "condition": {
      "path": "customer_name.meta_data.value",
      "operator": "contains",
      "value": "CLEANSHELF"
    },
    "actions": [
      {
        "description": "",
        "stage": "cleanshelf_item_transformations",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "BUTCHERY": "BUTCHERY (PER KG)",
                "DELI 1\\s*KG": "DELI PER KG"
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "cleanshelf_items_add_customer_name",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "append",
          "args": {
            "data_to_append": [
              "(FOR CLEANSHELF)"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "AND",
            "conditions": [
              {
                "operator": "not contains",
                "value": "CLEANSHELF"
              },
              {
                "operator": "OR",
                "conditions": [
                  {
                    "operator": "contains",
                    "value": "capon"
                  }
                ]
              }
            ]
          }
        }
      }
    ]
  },
  {
    "rule": "Magunas item transformations",
    "description": "",
    "stage": "magunas_item_transformations",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name.meta_data.value",
      "operator": "contains",
      "value": "MAGUNAS"
    },
    "actions": [
      {
        "description": "",
        "stage": "magunas_items_add_customer_name",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "append",
          "args": {
            "data_to_append": [
              "(FOR MAGUNAS)"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "not contains",
            "value": "MAGUNAS"
          }
        }
      }
    ]
  },
  {
    "rule": "Chandarana item transformations",
    "description": "",
    "stage": "chandarana_supermarket_item_transformations",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name.meta_data.value",
          "operator": "contains",
          "value": "CHANDARANA"
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "chandarana_supermarket_items_add_customer_name",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "append",
          "args": {
            "data_to_append": [
              "(FOR CHANDARANA)"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "AND",
            "conditions": [
              {
                "operator": "not contains",
                "value": "CHANDARANA"
              },
              {
                "operator": "OR",
                "conditions": [
                  {
                    "operator": "AND",
                    "conditions": [
                      {
                        "operator": "contains",
                        "value": "capon"
                      },
                      {
                        "operator": "not matches",
                        "value": "butchery|naked|"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    ]
  },
  {
    "rule": "Chandarana Butchery item transformations",
    "description": "",
    "stage": "chandarana_butcheries_item_transformations",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name.meta_data.value",
          "operator": "contains",
          "value": "CHANDARANA"
        },
        {
          "path": "customer_name.meta_data.other_details.Customer_Category",
          "operator": "==",
          "value": "Butcheries"
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "chandarana_butchery_items_tag_butchery",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "append",
          "args": {
            "data_to_append": [
              "(BUTCHERY)"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "AND",
            "conditions": [
              {
                "operator": "not contains",
                "value": "BUTCHERY"
              },
              {
                "operator": "in list all",
                "value": [
                  "beef",
                  "burgers"
                ]
              }
            ]
          }
        }
      },
      {
        "description": "",
        "stage": "chandarana_butchery_items_tag_pkg",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "append",
          "args": {
            "data_to_append": [
              "(PER KG)"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "AND",
            "conditions": [
              {
                "operator": "not in list all",
                "value": [
                  "PER KG",
                  "PER PC",
                  "FROZEN"
                ]
              }
            ]
          }
        }
      },
      {
        "description": "",
        "stage": "chandarana_butchery_items_transform_description",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "\\b(G2|E2)\\b": "",
                "\\b(MINCE LEAN)\\b": "MINCE MEAT ORDINARY",
                "\\b(FISH FILLETS)\\b": "NILE PERCH FISH FILLETS",
                "\\b(ECO-MINCE)\\b": "ECO-MINCE 500GMS"
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Other Butchery, Hotels and kuku shops item transformations",
    "description": "",
    "stage": "other_butchery_items_transformation",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name.meta_data.value",
          "operator": "not contains",
          "value": "CHANDARANA"
        },
        {
          "path": "customer_name.meta_data.other_details.Customer_Category",
          "operator": "in list any",
          "value": [
            "Butcheries",
            "Kuku Shop",
            "Hotels",
            "Caterer",
            "Restaurants"
          ]
        }
      ]
    },
    "actions": [
      {
        "description": "We append 'per kg' if the item description has no packaging details",
        "stage": "other_butchery_items_tag_pkg",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items",
          "function": "map",
          "args": {
            "path": "",
            "function": "append",
            "args": {
              "data_to_append": [
                {
                  "path": "description"
                },
                "(PER KG)"
              ],
              "separator": "",
              "use_data_as_path_value": "0",
              "value_key": "description"
            },
            "newField": "",
            "strict": "",
            "condition": {
              "operator": "AND",
              "conditions": [
                {
                  "operator": "matches",
                  "path": "unit_of_measure.0.selling_unit",
                  "value": "GM|GMS|KG"
                },
                {
                  "operator": "not matches",
                  "path": "description",
                  "value": "\\d+\\s*(?:G|GM|GMS|KG|KGS|PC|PCS)"
                },
                {
                  "operator": "AND",
                  "conditions": [
                    {
                      "operator": "not contains",
                      "path": "description",
                      "value": "capon"
                    },
                    {
                      "operator": "not contains",
                      "path": "description",
                      "value": "catering"
                    }
                  ]
                }
              ]
            }
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "For non butchery orders, set default state to frozen, if none is set",
    "description": "",
    "stage": "non_butchery_items_set_default_state",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name.meta_data.other_details.Customer_Category",
          "operator": "not in list all",
          "value": [
            "Butcheries",
            "Hotels",
            "Restaurants",
            "catering",
            "Clubs",
            "Fast Food"
          ]
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "non_butchery_items_set_default_state",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "append",
          "args": {
            "data_to_append": [
              "(Frozen)"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "AND",
            "conditions": [
              {
                "operator": "not in list all",
                "value": [
                  "Fresh",
                  "Frozen",
                  "Hungarian",
                  "butchery",
                  "polony",
                  "\\b(ham)\\b"
                ]
              },
              {
                "operator": "OR",
                "conditions": [
                  {
                    "operator": "not contains",
                    "value": "smoked"
                  },
                  {
                    "operator": "AND",
                    "conditions": [
                      {
                        "operator": "contains",
                        "value": "smoked"
                      },
                      {
                        "operator": "not in list all",
                        "value": [
                          "1\\s*KG",
                          "250"
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "operator": "OR",
                "conditions": [
                  {
                    "operator": "not matches",
                    "value": "burger"
                  },
                  {
                    "operator": "in list all",
                    "value": [
                      "burger",
                      "crispy"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    ]
  },
  {
    "rule": "For butchery orders, set default state to fresh, if none is set",
    "description": "",
    "stage": "butchery_items_set_default_state",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name.meta_data.other_details.Customer_Category",
      "operator": "==",
      "value": "Butcheries"
    },
    "actions": [
      {
        "description": "",
        "stage": "butchery_items_set_default_state",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "append",
          "args": {
            "data_to_append": [
              "(Fresh)"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "AND",
            "conditions": [
              {
                "operator": "not in list all",
                "value": [
                  "Fresh",
                  "Frozen",
                  "tenderloin",
                  "mixed portions",
                  "lamb set"
                ]
              },
              {
                "operator": "OR",
                "conditions": [
                  {
                    "operator": "matches",
                    "value": "CAPON\\s*\\d+\\.\\d+-\\d+\\.\\d+\\s*KG"
                  },
                  {
                    "operator": "not matches",
                    "value": "\\d+\\.*\\d*\\s*(?:G|GM|GMS|KG|KGS|PC|PCS)"
                  }
                ]
              }
            ]
          }
        }
      }
    ]
  },
  {
    "rule": "For Majid, where there's an error with vertical line being picked as 1 in quantity, we remove the 1",
    "description": "",
    "stage": "majid_items_clean_item_quantity",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name.meta_data.value",
      "operator": "in list any",
      "value": [
        "MAJID"
      ]
    },
    "actions": [
      {
        "description": "Remove the last '1' from quantity if it has 2+ digits",
        "stage": "majid_items_clean_item_quantity",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items",
          "function": "map",
          "args": {
            "path": "unit_of_measure.0.selling_quantity",
            "function": "regex_extract",
            "args": {
              "pattern": "^(\\d{1,})(?:1)$",
              "capture_group_number": "1",
              "is_case_sensitive": "0",
              "return_subject_on_null": "1"
            },
            "newField": "",
            "strict": "0",
            "condition": ""
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get all products",
    "description": "",
    "stage": "get_products_list",
    "dependencies": [],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "",
        "stage": "get_all_products_list",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "all_products_list",
          "function": "user_defined_function",
          "args": {
            "function_name": "get_master_data",
            "type": "all products"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "Filter only non blocked products",
        "stage": "removed_blocked_products",
        "dependencies": [
          "get_all_products_list"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "all_products_list",
          "function": "filter",
          "args": {
            "filter_criteria": {
              "operator": "AND",
              "conditions": [
                {
                  "term": "1",
                  "mode": "!=",
                  "key": "Blocked",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": [
                    "PC03299A",
                    "PC03234B",
                    "PC03234C",
                    "PC03331A",
                    "PC02042C"
                  ],
                  "mode": "not in",
                  "key": "No",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                }
              ]
            }
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "Rename the uom name",
        "stage": "rename_products_uom",
        "dependencies": [
          "get_all_products_list"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "all_products_list",
          "function": "rename_object_keys",
          "args": {
            "key_map": {
              "Sales_Unit_of_Measure": "Unit_of_Measure_Code"
            }
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get customer historically purchased products, if not butcheries, kuku shops and not TDRs/Staff",
    "description": "",
    "stage": "get_historical_products_list",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name.meta_data.id",
          "operator": "exists"
        },
        {
          "path": "is_tdr_order",
          "operator": "==",
          "value": "No"
        },
        {
          "path": "is_staff_order",
          "operator": "==",
          "value": "No"
        },
        {
          "path": "customer_name.meta_data.other_details.Customer_Category",
          "operator": "!=",
          "value": "Kuku Shop"
        },
        {
          "operator": "OR",
          "conditions": [
            {
              "path": "customer_name.meta_data.other_details.Customer_Category",
              "operator": "!=",
              "value": "Butcheries"
            },
            {
              "operator": "AND",
              "conditions": [
                {
                  "path": "customer_name.meta_data.other_details.Customer_Category",
                  "operator": "==",
                  "value": "Butcheries"
                },
                {
                  "path": "customer_name.matched_value",
                  "operator": "not matches",
                  "value": "kenchic|chandarana"
                }
              ]
            }
          ]
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "get_historical_products_list",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "products_list",
          "function": "user_defined_function",
          "args": {
            "function_name": "get_master_data",
            "type": "customer products"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "action": "function",
        "description": "Filter only products for the customer",
        "stage": "get_customer_historical_products_list",
        "dependencies": [],
        "skip": "0",
        "params": {
          "path": "products_list",
          "function": "filter",
          "args": {
            "filter_criteria": {
              "term": {
                "path": "customer_name.meta_data.id"
              },
              "mode": "==",
              "key": "Sell_to_Customer_No",
              "similarity_threshold": "",
              "term_exclusion_pattern": "",
              "value_exclusion_pattern": ""
            }
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "Remove duplicate products by product code",
        "stage": "remove_duplicate_customer_products",
        "dependencies": [
          "get_customer_historical_products_list"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "products_list",
          "function": "make_object_list_unique",
          "args": {
            "unique_key_paths": [
              "No"
            ],
            "rank_key_path": "No",
            "rank_order": "desc"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "We merge historical products to all products. This way, we can eliminate blocked historical products",
        "stage": "merge_customer_to_all_products",
        "dependencies": [
          "remove_duplicate_customer_products",
          "get_all_products_list"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "",
          "function": "merge",
          "args": {
            "left": {
              "path": "products_list"
            },
            "right": {
              "path": "all_products_list"
            },
            "join": {
              "type": "inner",
              "on": "left.No = right.No"
            },
            "fields": [
              "left.Sell_to_Customer_No",
              "left.No",
              "left.Description",
              "left.Unit_of_Measure_Code",
              "left.Unit_of_Measure",
              "left.Unit_Price",
              "left.PC_Type",
              "left.Ship_to_Code"
            ],
            "group_by": []
          },
          "newField": "products_list",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Set all products, if customer has no historical purchases",
    "description": "",
    "stage": "set_all_as_customer_products",
    "dependencies": [
      "merge_customer_to_all_products"
    ],
    "skip": "0",
    "condition": {
      "path": "products_list",
      "operator": "not exists"
    },
    "actions": [
      {
        "description": "",
        "stage": "set_all_as_customer_products",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "products_list",
          "value": "",
          "valueFromField": "all_products_list",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Filter PC and TRM products",
    "description": "",
    "stage": "remove_non_pc_trm_products",
    "dependencies": [
      "set_all_as_customer_products"
    ],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "action": "function",
        "description": "Filter only PC products where unit price is not zero",
        "stage": "remove_non_pc_trm_products",
        "dependencies": [],
        "skip": "0",
        "params": {
          "path": "products_list",
          "function": "filter",
          "args": {
            "filter_criteria": {
              "operator": "OR",
              "conditions": [
                {
                  "term": "PC",
                  "mode": "contains",
                  "key": "No",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "TRM",
                  "mode": "contains",
                  "key": "No",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "FI0001",
                  "mode": "contains",
                  "key": "No",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                }
              ]
            }
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Filter out non Naivas-specific products for Non-Naivas customers",
    "description": "",
    "stage": "naivas_remove_non_naivas_products",
    "dependencies": [
      "set_all_as_customer_products"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name.matched_value",
      "operator": "not contains",
      "value": "NAIVAS"
    },
    "actions": [
      {
        "description": "",
        "stage": "naivas_remove_non_naivas_products",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "products_list",
          "function": "filter",
          "args": {
            "filter_criteria": {
              "term": [
                "PC03267"
              ],
              "mode": "not in",
              "key": "No",
              "similarity_threshold": "",
              "term_exclusion_pattern": "",
              "value_exclusion_pattern": ""
            }
          },
          "newField": "",
          "strict": "",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "For Chandarana butcheries, filter out products that are only sold to chandarana supermarkets",
    "description": "",
    "stage": "chandarana_butchery_remove_supermarket_products",
    "dependencies": [
      "set_all_as_customer_products"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name.matched_value",
          "operator": "contains",
          "value": "CHANDARANA"
        },
        {
          "path": "customer_name.meta_data.other_details.Customer_Category",
          "operator": "==",
          "value": "Butcheries"
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "chandarana_butchery_remove_supermarket_products",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "products_list",
          "function": "filter",
          "args": {
            "filter_criteria": {
              "term": [
                "PC03095"
              ],
              "mode": "not in",
              "key": "No",
              "similarity_threshold": "",
              "term_exclusion_pattern": "",
              "value_exclusion_pattern": ""
            }
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Transformations on products list",
    "description": "",
    "stage": "product_transformations",
    "dependencies": [
      "remove_non_pc_trm_products",
      "naivas_remove_non_naivas_products",
      "chandarana_butchery_remove_supermarket_products"
    ],
    "skip": "0",
    "condition": {
      "path": "products_list",
      "operator": "exists"
    },
    "actions": [
      {
        "description": "Add a space before and after dashes",
        "stage": "products_add_space_around_dashes",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "products_list.*.Description",
          "function": "transform",
          "args": {
            "transformer": "preg_replace",
            "transformer_args": {
              "pattern": "-(?=\\S)",
              "replacement": "-",
              "add_spacer": "0",
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "Add pc type and description",
        "stage": "products_add_pc_type_to_description",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "products_list",
          "function": "map",
          "args": {
            "path": "",
            "function": "append",
            "args": {
              "data_to_append": [
                "(",
                {
                  "path": "PC_Type"
                },
                ")",
                {
                  "path": "Description"
                }
              ],
              "separator": "",
              "use_data_as_path_value": "0",
              "value_key": "Search_Field"
            },
            "newField": "",
            "strict": "0",
            "condition": {
              "path": "PC_Type",
              "operator": "exists"
            }
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "products_description_transformation",
        "dependencies": [
          "products_add_pc_type_to_description"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "products_list.*.Search_Field",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "\\b(B/OFF|B/0FF|B/LESS|BONE OFF|BONELES)\\b": "BONELESS",
                "\\b(BREASTBONE OFF)\\b": "BREAST BONELESS",
                "\\b(BONE/IN)\\b": "BONE IN",
                "\\b(W/SKIN)\\b": "SKIN ON",
                "(CAPON.*?)(1)([1-8])(?!\\d*KG)": "$1$2.$3KG",
                "\\b(CAPON 12)\\b": "CAPON 1.2KG",
                "\\b(CAPON 13)\\b": "CAPON 1.3KG",
                "\\b(CAPON 14)\\b": "CAPON 1.4KG",
                "\\b(CAPON 15)\\b": "CAPON 1.5KG",
                "\\b(CAPON 16)\\b": "CAPON 1.6KG",
                "\\b(CAPON 18)\\b": "CAPON 1.8KG",
                "\\b(DELI)\\b": "CATERING",
                "\\b(WO|W/O)\\b": "WITHOUT",
                "\\+GIBLET": "WITH GIBLET",
                "^(?=.*\\b(hand wrap|handwrap|capon)\\b).*(\\d+\\.\\d+)(?!KG)": "$0KG",
                "(\\d+)\\s*(G|GM|GMS|KG|KGS|PC|PCS)": "$1$2",
                "\\b(HANDWRAP|HAND WRAP)\\b": "(HANDWRAP) CAPON",
                "(CHICKEN|CKN)": "(CHICKEN)",
                "BEEF": "(BEEF)",
                "(H\\.P\\.?)": "",
                "\\s*(-)?\\s+no bar code": "(no bar code)",
                "\\b(\\d+)\\s*PC\\w*/PACK\\b": "",
                "^(?!.*\\b1/4\\b).*\\b(quarter)\\b": "$0 (1/4)",
                "^(?!.*\\bquarter\\b).*\\b(1/4)\\b": "$0 (quarter)",
                "MAJID": "(MAJID)",
                "QUICKMART": "(QUICKMART)",
                "(NAIVAZ|NAIVAS)": "(NAIVAS)",
                "CLEANSHELF": "(CLEANSHELF)",
                "MAGUNAS": "(MAGUNAS)",
                "KFC": "(KFC)",
                "\\bNAS\\b": "(NAS)",
                "\\(([^)]*)$": "($1)",
                "(?<=\\S)\\(": "[space](",
                "(?<=\\S)[-_]|[-_](?=\\S)": "[space]-[space]",
                "(\\S)&(\\S)": "$1 & $2",
                "\\bRETAIL\\b": ""
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "action": "function",
        "description": "Add the word chicken to all products",
        "stage": "products_description_append_chicken",
        "dependencies": [],
        "skip": "0",
        "params": {
          "path": "products_list.*.Search_Field",
          "function": "append",
          "args": {
            "data_to_append": [
              "(CHICKEN)"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "not in list all",
            "value": [
              "\\bchicken\\b",
              "\\bbeef\\b",
              "\\blamb\\b",
              "\\bgoat",
              "\\bsteak\\b",
              "\\bpork\\b",
              "\\bfillet\\b",
              "\\brump\\b",
              "\\bmince\\b",
              "\\btbone\\b",
              "\\bt bone\\b",
              "\\bt-bone\\b",
              "\\bbiltong\\b",
              "\\brangers\\b",
              "\\bTop side\\b",
              "\\bflank\\b",
              "\\bangus\\b",
              "\\bSilver side\\b",
              "\\bRibeye\\b",
              "\\bOx\\b",
              "\\bTail\\b",
              "\\bBlade\\b",
              "\\bChuck\\b",
              "\\bShin on\\b",
              "\\btenderloin\\b",
              "\\btender loin\\b",
              "\\bStrip\\s*loin\\b",
              "\\bmarrow\\b",
              "\\bsirloin\\b",
              "\\brib\\b"
            ]
          }
        }
      },
      {
        "action": "function",
        "description": "Add the word beef to beef products",
        "stage": "products_description_append_beef",
        "dependencies": [],
        "skip": "0",
        "params": {
          "path": "products_list.*.Search_Field",
          "function": "append",
          "args": {
            "data_to_append": [
              "(BEEF)"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "AND",
            "conditions": [
              {
                "operator": "not in list all",
                "value": [
                  "\\bchicken\\b",
                  "\\bbeef\\b"
                ]
              },
              {
                "operator": "in list any",
                "value": [
                  "\\btbone\\b",
                  "\\bt bone\\b",
                  "\\bt-bone\\b"
                ]
              }
            ]
          }
        }
      },
      {
        "action": "function",
        "description": "Add PER KG to all products whose unit of measure is KGS",
        "stage": "products_description_append_pkg",
        "dependencies": [
          "products_description_append_beef",
          "products_description_append_chicken"
        ],
        "skip": "0",
        "params": {
          "path": "products_list",
          "function": "append",
          "args": {
            "data_to_append": [
              "(PER KG)"
            ],
            "separator": "",
            "use_data_as_path_value": "0",
            "value_key": "Search_Field"
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "AND",
            "conditions": [
              {
                "path": "Unit_of_Measure_Code",
                "operator": "==",
                "value": "KGS"
              },
              {
                "path": "Search_Field",
                "operator": "not in list all",
                "value": [
                  "\\d+\\s*KG",
                  "500"
                ]
              }
            ]
          }
        }
      },
      {
        "action": "function",
        "description": "Add 1kg to CHICKEN SAUSAGE 26PC PACK",
        "stage": "products_sausage26pc_append_1kg",
        "dependencies": [
          "products_description_append_beef",
          "products_description_append_chicken"
        ],
        "skip": "0",
        "params": {
          "path": "products_list.*.Search_Field",
          "function": "append",
          "args": {
            "data_to_append": [
              "(1KG)"
            ],
            "separator": "",
            "use_data_as_path_value": "1",
            "value_key": ""
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "AND",
            "conditions": [
              {
                "operator": "contains",
                "value": "CHICKEN"
              },
              {
                "operator": "contains",
                "value": "SAUSAGE 26PC PACK"
              }
            ]
          }
        }
      }
    ]
  },
  {
    "rule": "Chandarana butchery product list transformations",
    "description": "",
    "stage": "chandarana_butchery_product_transformations",
    "dependencies": [
      "remove_non_pc_trm_products",
      "chandarana_butchery_remove_supermarket_products"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name.meta_data.value",
          "operator": "contains",
          "value": "CHANDARANA"
        },
        {
          "path": "customer_name.meta_data.other_details.Customer_Category",
          "operator": "==",
          "value": "Butcheries"
        }
      ]
    },
    "actions": [
      {
        "action": "function",
        "description": "Add PER PC to all products whose unit of measure is PCS",
        "stage": "chandarana_butchery_product_description_append_ppc",
        "dependencies": [],
        "skip": "0",
        "params": {
          "path": "products_list",
          "function": "append",
          "args": {
            "data_to_append": [
              "(PER PC)"
            ],
            "separator": "",
            "use_data_as_path_value": "0",
            "value_key": "Search_Field"
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "AND",
            "conditions": [
              {
                "path": "Unit_of_Measure_Code",
                "operator": "!=",
                "value": "KGS"
              },
              {
                "path": "Search_Field",
                "operator": "not in list all",
                "value": [
                  "1KG",
                  "500",
                  "PER KG"
                ]
              }
            ]
          }
        }
      },
      {
        "description": "",
        "stage": "chandarana_butchery_product_description_chops",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "products_list.*.Search_Field",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "\\b(G2|E2)\\b": "",
                "\\b(LAMB CHOPS)\\b": "Fresh $1"
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Match Products",
    "description": "",
    "stage": "match_products",
    "dependencies": [
      "products_description_transformation",
      "products_sausage26pc_append_1kg",
      "products_description_append_pkg",
      "chandarana_butchery_product_description_chops"
    ],
    "skip": "0",
    "condition": {
      "path": "products_list",
      "operator": "exists"
    },
    "actions": [
      {
        "description": "",
        "stage": "item_remove_duplicate_description_words",
        "dependencies": [
          "item_add_packaging_to_description",
          "item_append_word_beef",
          "item_append_word_chicken"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items.*.description",
          "function": "remove_repeated_words",
          "args": "",
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "products_remove_duplicate_description_words",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "products_list.*.Search_Field",
          "function": "remove_repeated_words",
          "args": "",
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "match_products",
        "dependencies": [
          "item_remove_duplicate_description_words",
          "products_remove_duplicate_description_words"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items",
          "function": "user_defined_function",
          "args": {
            "function_name": "semantic_match",
            "search_key": "description",
            "matching_key": "description",
            "corpus": {
              "path": "products_list"
            },
            "corpus_search_key": "Search_Field",
            "corpus_id_key": "No",
            "master_data_type": "all products",
            "similarity_threshold": "1",
            "stop_words": [
              "kenchic",
              "limited",
              "ltd"
            ],
            "model": "adaV3"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Remove duplicate items",
    "description": "",
    "stage": "remove_duplicate_matched_products",
    "dependencies": [
      "match_products"
    ],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "",
        "stage": "remove_duplicate_matched_products",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "items",
          "function": "make_object_list_unique",
          "args": {
            "unique_key_paths": [
              "description.meta_data.id"
            ],
            "rank_key_path": "description.similarity",
            "rank_order": "desc"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get delivery section based on product data",
    "description": "",
    "stage": "get_delivery_section",
    "dependencies": [
      "set_default_section"
    ],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "",
        "stage": "get_product_sections_list",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "product_sections",
          "value": "",
          "valueFromField": "items.*.section",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      },
      {
        "description": "",
        "stage": "get_delivery_section_from_product_sections",
        "dependencies": [
          "get_product_sections_list"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "product_sections",
          "function": "reducer",
          "args": {
            "reducer": "modal_value",
            "priority": {
              "Shop": "1",
              "Deli": "2",
              "Butchery": "3"
            },
            "default": "Shop"
          },
          "newField": "delivery_section",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get full delivery locations for Majid",
    "description": "",
    "stage": "majid_get_delivery_location",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name.matched_value",
          "operator": "exists"
        },
        {
          "path": "customer_name.meta_data.value",
          "operator": "contains",
          "value": "MAJID"
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "majid_get_delivery_location",
        "dependencies": [
          "get_delivery_section_from_product_sections"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "",
          "function": "concat",
          "args": {
            "data_to_concat": [
              {
                "path": "customer_name.meta_data.value"
              },
              {
                "path": "delivery_location"
              },
              {
                "path": "delivery_section"
              }
            ],
            "separator": "",
            "enclosure": ""
          },
          "newField": "full_delivery_location",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get full delivery locations for non Majid and non TDRs: Exclude where delivery location has no sections",
    "description": "",
    "stage": "non_majid_non_tdr_get_delivery_location",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name.matched_value",
          "operator": "exists"
        },
        {
          "path": "customer_name.meta_data.value",
          "operator": "not contains",
          "value": "MAJID"
        },
        {
          "path": "is_tdr_order",
          "operator": "==",
          "value": "No"
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "non_majid_non_tdr_set_full_delivery_location",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "full_delivery_location",
          "value": "",
          "valueFromField": "delivery_location",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      },
      {
        "description": "",
        "stage": "non_majid_non_tdr_full_delivery_location_add_section",
        "dependencies": [
          "non_majid_non_tdr_set_full_delivery_location"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "",
          "function": "append",
          "args": {
            "data_to_append": [
              {
                "path": "delivery_location"
              },
              {
                "path": "delivery_section"
              }
            ],
            "separator": "",
            "use_data_as_path_value": "0",
            "value_key": "full_delivery_location"
          },
          "newField": "",
          "strict": "",
          "condition": {
            "operator": "OR",
            "conditions": [
              {
                "path": "delivery_location",
                "operator": "not matches",
                "value": "quick\\s*mart"
              },
              {
                "path": "delivery_location",
                "operator": "not matches",
                "value": "outering\\s*1"
              }
            ]
          }
        }
      }
    ]
  },
  {
    "rule": "Get full delivery locations for TDRs",
    "description": "",
    "stage": "tdr_get_delivery_location",
    "dependencies": [
      "get_tdr_details"
    ],
    "skip": "0",
    "condition": {
      "path": "is_tdr_order",
      "operator": "==",
      "value": "Yes"
    },
    "actions": [
      {
        "description": "",
        "stage": "tdr_get_delivery_location",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "",
          "function": "concat",
          "args": {
            "data_to_concat": [
              {
                "path": "tdr_template_data.tdr_name"
              },
              {
                "path": "tdr_template_data.customer_name"
              }
            ],
            "separator": "",
            "enclosure": ""
          },
          "newField": "full_delivery_location",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get shipping addresses and format name and code",
    "description": "",
    "stage": "get_shipping_address_list",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name.matched_value",
      "operator": "exists"
    },
    "actions": [
      {
        "description": "",
        "stage": "get_shipping_address_list",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "shipping_addresses_list",
          "function": "user_defined_function",
          "args": {
            "function_name": "get_master_data",
            "type": "shipping locations"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "get_customer_shipping_address_list",
        "dependencies": [
          "get_shipping_address_list"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "shipping_addresses_list",
          "function": "filter",
          "args": {
            "filter_criteria": {
              "term": {
                "path": "customer_name.meta_data.id"
              },
              "mode": "==",
              "key": "Customer_No",
              "similarity_threshold": "",
              "term_exclusion_pattern": "",
              "value_exclusion_pattern": ""
            }
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get full delivery location search fields for Naivas",
    "description": "We use address 2 for more precision. Only updated for Naivas",
    "stage": "naivas_get_shipping_address_search_field",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name.matched_value",
          "operator": "exists"
        },
        {
          "path": "customer_name.meta_data.value",
          "operator": "contains",
          "value": "Naivas"
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "naivas_get_shipping_address_search_field",
        "dependencies": [
          "get_customer_shipping_address_list"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "shipping_addresses_list",
          "function": "concat_multi_array_assoc",
          "args": {
            "fields": [
              "Name",
              "Code",
              "Address_2"
            ],
            "newField": "Search_Field",
            "separator": "",
            "enclosure": "brackets"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get full delivery location search fields for others; not Naivas and not TDRs",
    "description": "We don't use Address 2 since most of them are not yet update",
    "stage": "non_naivas_non_tdr_get_shipping_address_search_field",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name.matched_value",
          "operator": "exists"
        },
        {
          "path": "customer_name.meta_data.value",
          "operator": "not contains",
          "value": "Naivas"
        },
        {
          "path": "is_tdr_order",
          "operator": "==",
          "value": "No"
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "non_naivas_non_tdr_get_shipping_address_search_field",
        "dependencies": [
          "get_customer_shipping_address_list"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "shipping_addresses_list",
          "function": "concat_multi_array_assoc",
          "args": {
            "fields": [
              "Name",
              "Code"
            ],
            "newField": "Search_Field",
            "separator": "",
            "enclosure": "brackets"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get full delivery location search fields TDRs",
    "description": "We use the route plan",
    "stage": "tdr_get_shipping_address_search_field",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name.matched_value",
          "operator": "exists"
        },
        {
          "path": "customer_name.meta_data.value",
          "operator": "not contains",
          "value": "Naivas"
        },
        {
          "path": "is_tdr_order",
          "operator": "==",
          "value": "Yes"
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "tdr_get_shipping_address_search_field",
        "dependencies": [
          "get_customer_shipping_address_list"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "shipping_addresses_list",
          "function": "concat_multi_array_assoc",
          "args": {
            "fields": [
              "Name",
              "Route_plan"
            ],
            "newField": "Search_Field",
            "separator": "",
            "enclosure": "brackets"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Match shipping location",
    "description": "",
    "stage": "match_shipping_location",
    "dependencies": [
      "tdr_get_delivery_location",
      "non_majid_non_tdr_full_delivery_location_add_section",
      "majid_get_delivery_location"
    ],
    "skip": "0",
    "condition": {
      "path": "full_delivery_location",
      "operator": "exists"
    },
    "actions": [
      {
        "description": "",
        "stage": "delivery_location_transformation",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "full_delivery_location",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "\\b(MSA)\\b": "Mombasa",
                "\\b(NRB/PION)\\b": "Nairobi Pioneer",
                "\\b(NBI|NRB)\\b": "Nairobi",
                "\\b(WESTL|WEST/L)\\b": "Westlands",
                "\\b(KITE)\\b": "Kitengela",
                "\\b(RD)\\b": "Road",
                "\\b(H/WAY|HWY)\\b": "Highway",
                "\\b(OPP)\\b": "Opposite",
                "\\b(S/C MAC)\\b": "SUPER CENTER MACHAKOS",
                "\\b(MACHA|MAC)\\b": "MACHAKOS",
                "KISUMU\\s+MEGA\\s+CITY": "MEGA CITY",
                "\\bEBP\\b": "EASTERN BYPASS",
                "\\b(BYPASS)\\b": "EASTERN BYPASS",
                "\\b(EASTERN BYPASS 2)\\b": "EASTERN BYPASS 2 (FRESH AND EASY)",
                "\\bCARREFOUR MARKET": "MAJID",
                "\\b(?:s|sh|sho|shop)\\b": "SHOP",
                "\\b(?:d|de|del|deli)\\b": "DELI",
                "\\b(?:b|bu|but|butc|butch|butche|butcher|butchery)\\b": "BUTCHERY",
                "^(MACHAKOS)\\s+(SHOP|DELI|BUTCHERY)$": "OLD $1 $2",
                "^(?!.*\\bgeneral mathenge\\b).*\\b(Azalea Square Centre)\\b": "$0 GENERAL MATHENGE"
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "shipping_addresses_transformations",
        "dependencies": [
          "get_customer_shipping_address_list",
          "tdr_get_shipping_address_search_field",
          "non_naivas_non_tdr_get_shipping_address_search_field",
          "naivas_get_shipping_address_search_field"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "shipping_addresses_list.*.Search_Field",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "\\b(MSA)\\b": "Mombasa",
                "\\b(MAL|MAILNDI)\\b": "Malindi",
                "\\bKIS\\b": "KISUMU",
                "\\b(NRB/PION)\\b": "Nairobi Pioneer",
                "\\b(NBI)\\b": "Nairobi",
                "\\b(WESTL)\\b": "Westlands",
                "\\b(KITE)\\b": "Kitengela",
                "\\b(EMBA)\\b": "Embakasi",
                "\\b(RD)\\b": "Road",
                "\\b(H/WAY|HWY)\\b": "Highway",
                "\\b(OPP)\\b": "Opposite",
                "\\b(LIFE S)\\b": "LIFESTYLE CBD",
                "\\b(CRYSTAL RV)\\b": "CRYSTAL RIVERS MALL",
                "\\bONE STOP ([DSB])\\b": "ONE STOP KAREN $1",
                "\\b(GRN PARK)\\b": "GREEN PARK",
                "\\b(G/MATHENGE)\\b": "GENERAL MATHENGE",
                "\\b(BYPASS)\\b": "EASTERN BYPASS",
                "\\b(FRSH&EASYB)\\b": "FRESH AND EASY BUTCHERY (EASTERN BYPASS 2)",
                "\\b(FRSH&EASYD)\\b": "FRESH AND EASY DELI (EASTERN BYPASS 2)",
                "\\b(FRSH&EASYS)\\b": "FRESH AND EASY SHOP (EASTERN BYPASS 2)",
                "\\b(K/ WEST|K/WEST)\\b": "Kahawa West",
                "\\b(K/SUKARI)\\b": "Kahawa Sukari",
                "\\bOUTERING2B\\b": "Outering 2 Butchery",
                "\\bOUTERING2S\\b": "Outering 2 Shop",
                "\\bOUTERING2D\\b": "Outering 2 Deli",
                "\\b(PIPEL)\\b": "Pipeline",
                "\\b(ROYSA)\\b": "Roysambu",
                "\\b(TOM MB)\\b": "Tom Mboya",
                "\\b(DONH)\\b": "Donholm",
                "\\b(LAVI)\\b": "LAVINGTON",
                "\\b(MCK/EXPR)\\b": "Machakos Express",
                "\\b(MCK/PION)\\b": "Machakos Pioneer",
                "\\b(MTWAPEXPRD)\\b": "Mtwapa Express Deli",
                "\\b(MTWAPEXPRB)\\b": "Mtwapa Express Butchery",
                "\\b(MTWAPEXPRS)\\b": "Mtwapa Express Shop",
                "\\b(MTWAPMALLD)\\b": "Mtwapa Mall Deli",
                "\\b(MTWAPMALLB)\\b": "Mtwapa Mall Butchery",
                "\\b(MTWAPMALLS)\\b": "Mtwapa Mall Shop",
                "\\b(RONGAEXP)\\b": "Rongai Express",
                "\\b(UTA/EXPR)\\b": "Utawala Express",
                "\\b(UTA/MAIN)\\b": "Utawala Main",
                "\\b(MFA)\\b": "MFANGANO",
                "\\b(SIGNATURE)\\b": "SIGNATURE MALL",
                "\\b(THE WELL)\\b": "THE WELL - LANGATA ROAD",
                "\\b(SECTIO 111)\\b": "SECTION 111",
                "\\b(S/C MAC)\\b": "SUPER CENTER MACHAKOS",
                "\\b(MACHA|MAC)\\b": "MACHAKOS",
                "\\b(OLD M)\\b": "OLD MACHAKOS",
                "\\b(KISII HY)\\b": "KISII HYPER",
                "\\b(Embakasi NY)\\b": "Embakasi NYAYO",
                "\\b(NGONG)\\b": "NGONG TOWN",
                "\\b(DEL2)\\b": "DELI",
                "\\b(BUT2)\\b": "BUTCHERY",
                "\\b(?:s|sh|sho|shop|shp)\\b": "SHOP",
                "\\b(?:d|de|del|deli)\\b": "DELI",
                "\\b(?:b|bu|but|butc|butch|butche|butcher|butchery)\\b": "BUTCHERY",
                "\\b(NAIVAS KITENGELA)\\b": "NAIVAS KITENGELA MALL",
                "\\b(NAIVAS KUBWA)\\b": "NAIVAS NAIVASHA KUBWA",
                "\\b(NAIVAS NDOGO)\\b": "NAIVAS NAIVASHA NDOGO",
                "\\b(NAIVAS MALINDI HIGHWAY)\\b": "FESTIVAL MALL - NAIVAS MALINDI HIGHWAY",
                "\\bQUICK MART ECHIRO\\b": "QUICK MART KISII ECHIRO",
                "\\bQUICK MART KAKAMEGA\\b": "QUICK MART KAKAMEGA SHILOAH",
                "\\b(E/BYPASS)\\b": "EASTERN BYPASS",
                "\\b(NRK)\\b": "NAROK",
                "\\b(KSI)\\b": "KISII",
                "\\b(ISBNA)\\b": "ISIBANIA",
                "\\b(KCO)\\b": "KERICHO",
                "\\bELD\\b": "ELDORET",
                "\\bBGM\\b": "BUNGOMA",
                "\\bKKMG\\b": "KAKAMEGA",
                "\\bPROM\\b": "PROMENADE"
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "set_temp_delivery_location",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "temp_delivery_location",
          "value": "",
          "valueFromField": "delivery_location",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      },
      {
        "description": "",
        "stage": "match_shipping_location",
        "dependencies": [
          "get_customer_shipping_address_list",
          "delivery_location_transformation",
          "shipping_addresses_transformations",
          "set_temp_delivery_location"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "full_delivery_location",
          "function": "user_defined_function",
          "args": {
            "function_name": "semantic_search",
            "corpus": {
              "path": "shipping_addresses_list"
            },
            "corpus_search_key": "Search_Field",
            "corpus_id_key": "Code",
            "master_data_type": "shipping locations",
            "similarity_threshold": "1",
            "stop_words": [
              "limited",
              "ltd",
              "P.O BOX",
              "Nairobi",
              "Mombasa",
              "Kenya",
              "Branch",
              "Naivas",
              "Quick Mart",
              "Quickmart",
              "CHANDARANA SUPERMARKETS",
              "CLEANSHELF SUPERMARKET",
              "EASTLEIGH MATTRESSES",
              "MAGUNAS SUPER STORES (K)",
              "KAMINDI SELFRIDGES SUPERMARKET",
              "ONN THE WAY LTD(MUTHAIGA)"
            ],
            "model": "adaV3"
          },
          "newField": "delivery_location",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "set_delivery_location_from_temp",
        "dependencies": [
          "match_shipping_location"
        ],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "delivery_location.original_value",
          "value": "",
          "valueFromField": "temp_delivery_location",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      },
      {
        "description": "",
        "stage": "remove_temp_delivery_location",
        "dependencies": [
          "set_delivery_location_from_temp"
        ],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "temp_delivery_location"
        }
      }
    ]
  },
  {
    "rule": "Get contact persons list",
    "description": "",
    "stage": "get_contact_persons_list",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name.matched_value",
      "operator": "exists"
    },
    "actions": [
      {
        "description": "",
        "stage": "get_contact_persons_list",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "contacts_list",
          "function": "user_defined_function",
          "args": {
            "function_name": "get_master_data",
            "type": "contacts"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "get_customer_contact_persons_list",
        "dependencies": [
          "get_contact_persons_list"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "contacts_list",
          "function": "filter",
          "args": {
            "filter_criteria": {
              "term": {
                "path": "customer_name.meta_data.id"
              },
              "mode": "==",
              "key": "Customer_No",
              "similarity_threshold": "",
              "term_exclusion_pattern": "",
              "value_exclusion_pattern": ""
            }
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "contacts_list_name_transformation",
        "dependencies": [
          "get_customer_contact_persons_list"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "contacts_list.*.Name",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "\\b(?:s|sh|sho|shop|shp)\\b": "SHOP",
                "\\b(?:d|de|del|deli)\\b": "DELI",
                "\\b(?:b|bu|but|butc|butch|butche|butcher|butchery)\\b": "BUTCHERY",
                "(\\w)\\s*-\\s*(\\w)": "$1 - $2",
                "WATERFRONT": "WATERFRONT KAREN",
                "NAIVAS GATEWAY": "NAIVAS SYOKIMAU (GATEWAY MALL)",
                "\\b(NAIVAS NYAYO)\\b": "NAIVAS EMBAKASI NYAYO",
                "\\b(QUICKMART|QUICK MART) CROSSROADS\\b": "QUICK MART KAREN (CROSSROADS)",
                "NAIVAS SPUR": "NAIVAS SPUR MALL",
                "\\b(BYPASS1)\\b": "EASTERN BYPASS",
                "\\b(BYPASS2)\\b": "FRESH and EASY",
                "LIFESTYLE": "LIFESTYLE CBD",
                "\\bMACH|MACHA\\b": "MACHAKOS"
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Match contact person for Majid: picks section managers",
    "description": "",
    "stage": "majid_match_contact_person",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name.matched_value",
          "operator": "exists"
        },
        {
          "path": "customer_name.meta_data.other_details.Customer_Category",
          "operator": "==",
          "value": "Supermarkets"
        },
        {
          "path": "customer_name.meta_data.value",
          "operator": "contains",
          "value": "MAJID"
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "majid_get_contact_person_name",
        "dependencies": [
          "get_delivery_section_from_product_sections",
          "majid_get_delivery_location"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "",
          "function": "concat",
          "args": {
            "data_to_concat": [
              {
                "path": "customer_name.meta_data.value"
              },
              {
                "path": "delivery_section"
              }
            ],
            "separator": "",
            "enclosure": ""
          },
          "newField": "contact_person",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "majid_match_contact_person",
        "dependencies": [
          "majid_get_contact_person_name",
          "contacts_list_name_transformation"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "contact_person",
          "function": "user_defined_function",
          "args": {
            "function_name": "semantic_search",
            "corpus": {
              "path": "contacts_list"
            },
            "corpus_search_key": "Name",
            "corpus_id_key": "No",
            "master_data_type": "contacts",
            "similarity_threshold": "1",
            "stop_words": [
              "kenchic",
              "limited",
              "ltd",
              "P.O BOX",
              "Nairobi",
              "Kenya",
              "Naivas",
              "Quick Mart",
              "Quickmart",
              "CHANDARANA SUPERMARKETS",
              "CHANDARANA",
              "CLEANSHELF SUPERMARKET",
              "CLEANSHELF",
              "EASTLEIGH MATTRESSES",
              "EAST MART",
              "EASTMART",
              "MAGUNAS SUPER STORES (K)",
              "MAGUNAS",
              "KAMINDI SELFRIDGES SUPERMARKET",
              "ONN THE WAY LTD(MUTHAIGA)"
            ],
            "model": "adaV3"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Match contact person for Other retailers: picks branch managers",
    "description": "",
    "stage": "other_supermarkets_match_contact_person",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name.matched_value",
          "operator": "exists"
        },
        {
          "path": "customer_name.meta_data.other_details.Customer_Category",
          "operator": "==",
          "value": "Supermarkets"
        },
        {
          "path": "customer_name.meta_data.value",
          "operator": "not contains",
          "value": "MAJID"
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "other_supermarkets_get_branch_managers",
        "dependencies": [
          "get_customer_contact_persons_list"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "contacts_list",
          "function": "filter",
          "args": {
            "filter_criteria": {
              "operator": "OR",
              "conditions": [
                {
                  "term": "BRANCH MANAGER",
                  "mode": "==",
                  "key": "Designation_New",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "BRANCH MANNAGER",
                  "mode": "==",
                  "key": "Designation_New",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "BRANCH MANGER",
                  "mode": "==",
                  "key": "Designation_New",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "BRANCH ASSISTANT MANAGER",
                  "mode": "==",
                  "key": "Designation_New",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "BRANCH MANAGER & ASSISTANT",
                  "mode": "==",
                  "key": "Designation_New",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "BRANCH SUPERVISOR",
                  "mode": "==",
                  "key": "Designation_New",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "PROCUREMENT",
                  "mode": "==",
                  "key": "Designation_New",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "MANAGER-TONNY",
                  "mode": "==",
                  "key": "Designation_New",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "MANAGER",
                  "mode": "contains",
                  "key": "Designation_New",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "PROCUREMENT",
                  "mode": "==",
                  "key": "Designation_New",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                },
                {
                  "term": "MANAGING DIRECTOR",
                  "mode": "==",
                  "key": "Designation_New",
                  "similarity_threshold": "",
                  "term_exclusion_pattern": "",
                  "value_exclusion_pattern": ""
                }
              ]
            }
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "other_supermarkets_get_contact_person_name",
        "dependencies": [
          "match_shipping_location"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "",
          "function": "concat",
          "args": {
            "data_to_concat": [
              {
                "path": "delivery_location.meta_data.other_details.Name"
              },
              {
                "path": "delivery_location.meta_data.other_details.Full Code"
              }
            ],
            "separator": "",
            "enclosure": ""
          },
          "newField": "contact_person",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "other_supermarkets_match_contact_person",
        "dependencies": [
          "other_supermarkets_get_contact_person_name",
          "other_supermarkets_get_branch_managers",
          "contacts_list_name_transformation"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "contact_person",
          "function": "user_defined_function",
          "args": {
            "function_name": "semantic_search",
            "corpus": {
              "path": "contacts_list"
            },
            "corpus_search_key": "Name",
            "corpus_id_key": "No",
            "master_data_type": "contacts",
            "similarity_threshold": "1",
            "stop_words": [
              "kenchic",
              "limited",
              "ltd",
              "P.O BOX",
              "Nairobi",
              "Kenya",
              "Naivas",
              "Quick Mart",
              "Quickmart",
              "CHANDARANA SUPERMARKETS",
              "CHANDARANA",
              "CLEANSHELF SUPERMARKET",
              "CLEANSHELF",
              "EASTLEIGH MATTRESSES",
              "EAST MART",
              "EASTMART",
              "MAGUNAS SUPER STORES (K)",
              "MAGUNAS",
              "KAMINDI SELFRIDGES SUPERMARKET",
              "ONN THE WAY LTD(MUTHAIGA)",
              "Shop",
              "Deli",
              "Butchery"
            ],
            "model": "adaV3"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Match contact person for Other non supermarket customers that are also not TDRs",
    "description": "",
    "stage": "non_tdr_match_contact_person",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name.matched_value",
          "operator": "exists"
        },
        {
          "path": "customer_name.meta_data.value",
          "operator": "not contains",
          "value": "MAJID"
        },
        {
          "path": "customer_name.meta_data.other_details.Customer_Category",
          "operator": "!=",
          "value": "Supermarkets"
        },
        {
          "path": "is_tdr_order",
          "operator": "==",
          "value": "No"
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "non_tdr_get_contact_person_name",
        "dependencies": [
          "match_shipping_location"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "",
          "function": "concat",
          "args": {
            "data_to_concat": [
              {
                "path": "delivery_location.meta_data.other_details.Name"
              },
              {
                "path": "delivery_location.meta_data.other_details.Full Code"
              }
            ],
            "separator": "",
            "enclosure": ""
          },
          "newField": "contact_person",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "non_tdr_match_contact_person",
        "dependencies": [
          "non_tdr_get_contact_person_name",
          "contacts_list_name_transformation"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "contact_person",
          "function": "user_defined_function",
          "args": {
            "function_name": "semantic_search",
            "corpus": {
              "path": "contacts_list"
            },
            "corpus_search_key": "Name",
            "corpus_id_key": "No",
            "master_data_type": "contacts",
            "similarity_threshold": "1",
            "stop_words": [
              "kenchic",
              "limited",
              "ltd",
              "P.O BOX",
              "Nairobi",
              "Kenya",
              "Naivas",
              "Quick Mart",
              "Quickmart",
              "CHANDARANA SUPERMARKETS",
              "CHANDARANA",
              "CLEANSHELF SUPERMARKET",
              "CLEANSHELF",
              "EASTLEIGH MATTRESSES",
              "EAST MART",
              "EASTMART",
              "MAGUNAS SUPER STORES (K)",
              "MAGUNAS",
              "KAMINDI SELFRIDGES SUPERMARKET",
              "ONN THE WAY LTD(MUTHAIGA)"
            ],
            "model": "adaV3"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Match contact person for TDRs",
    "description": "",
    "stage": "tdr_match_contact_person",
    "dependencies": [
      "get_tdr_details"
    ],
    "skip": "0",
    "condition": {
      "path": "is_tdr_order",
      "operator": "==",
      "value": "Yes"
    },
    "actions": [
      {
        "description": "",
        "stage": "tdr_get_contact_person_name",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "contact_person",
          "value": "",
          "valueFromField": "tdr_template_data.customer_name",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      },
      {
        "description": "",
        "stage": "tdr_match_contact_person",
        "dependencies": [
          "tdr_get_contact_person_name",
          "contacts_list_name_transformation"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "contact_person",
          "function": "user_defined_function",
          "args": {
            "function_name": "semantic_search",
            "corpus": {
              "path": "contacts_list"
            },
            "corpus_search_key": "Name",
            "corpus_id_key": "No",
            "master_data_type": "contacts",
            "similarity_threshold": "1",
            "stop_words": [],
            "model": "adaV3"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get delivery route data",
    "description": "",
    "stage": "get_delivery_schedule",
    "dependencies": [],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "",
        "stage": "get_delivery_schedule",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "delivery_schedule",
          "function": "user_defined_function",
          "args": {
            "function_name": "get_master_data",
            "type": "delivery schedule"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Set the default delivery schedule key",
    "description": "",
    "stage": "set_default_delivery_schedule_key",
    "dependencies": [],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "",
        "stage": "set_default_delivery_schedule_key",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "delivery_schedule_key",
          "value": "OTHERS",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Get the delivery schedule key for Majid",
    "description": "",
    "stage": "majid_get_default_delivery_schedule_key",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name.matched_value",
          "operator": "exists"
        },
        {
          "path": "customer_name.meta_data.value",
          "operator": "contains",
          "value": "MAJID"
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "majid_get_default_delivery_schedule_key",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "delivery_schedule_key",
          "value": "MAJID",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Get the delivery schedule key for Naivas",
    "description": "",
    "stage": "naivas_get_default_delivery_schedule_key",
    "dependencies": [
      "match_shipping_location"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "delivery_location.matched_value",
          "operator": "exists"
        },
        {
          "path": "delivery_schedule_key",
          "operator": "exists"
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "naivas_get_default_delivery_schedule_key",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "delivery_schedule_key",
          "value": "NAIVAS",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Get the delivery schedule key for Quick Mart",
    "description": "",
    "stage": "quickmart_get_default_delivery_schedule_key",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "customer_name.matched_value",
          "operator": "exists"
        },
        {
          "path": "customer_name.meta_data.value",
          "operator": "contains",
          "value": "QUICK MART"
        }
      ]
    },
    "actions": [
      {
        "description": "",
        "stage": "quickmart_get_default_delivery_schedule_key",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "delivery_schedule_key",
          "value": "QUICKMART",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Get route delivery details",
    "description": "",
    "stage": "get_route_delivery_schedule",
    "dependencies": [],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "action": "function",
        "stage": "filter_route_delivery_schedule",
        "description": "",
        "dependencies": [
          "match_shipping_location"
        ],
        "skip": "0",
        "params": {
          "path": "delivery_schedule",
          "function": "filter",
          "args": {
            "filter_criteria": {
              "term": {
                "path": "delivery_location.meta_data.other_details.Route_plan"
              },
              "mode": "==",
              "key": "ROUTE",
              "similarity_threshold": "",
              "term_exclusion_pattern": "",
              "value_exclusion_pattern": ""
            }
          },
          "newField": "route_delivery_schedule",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "action": "set",
        "stage": "get_route_delivery_schedule",
        "description": "",
        "dependencies": [
          "filter_route_delivery_schedule"
        ],
        "skip": "0",
        "params": {
          "path": "route_delivery_schedule",
          "value": "",
          "valueFromField": "route_delivery_schedule.0",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Get the branch/town",
    "description": "",
    "stage": "get_delivery_branch",
    "dependencies": [
      "get_delivery_schedule"
    ],
    "skip": "0",
    "condition": {
      "path": "delivery_schedule",
      "operator": "exists"
    },
    "actions": [
      {
        "description": "",
        "stage": "get_delivery_branch",
        "dependencies": [
          "match_shipping_location"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "delivery_location.meta_data.value",
          "function": "user_defined_function",
          "args": {
            "function_name": "fuzzy_search",
            "corpus": {
              "path": "delivery_schedule"
            },
            "corpus_search_key": "BRANCH",
            "corpus_id_key": "BRANCH",
            "master_data_type": "delivery schedule",
            "similarity_threshold": "90"
          },
          "newField": "branch_delivery_schedule",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Get the delivery schedule for branch, if set",
    "description": "",
    "stage": "get_branch_delivery_schedule",
    "dependencies": [
      "get_delivery_branch"
    ],
    "skip": "0",
    "condition": {
      "path": "branch_delivery_schedule.meta_data.other_details",
      "operator": "exists"
    },
    "actions": [
      {
        "description": "",
        "stage": "get_branch_delivery_schedule",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "delivery_schedule_details",
          "value": "",
          "valueFromField": "branch_delivery_schedule.meta_data.other_details",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Get the delivery schedule from route, if set and no branch",
    "description": "",
    "stage": "get_non_branch_delivery_schedule",
    "dependencies": [
      "get_delivery_branch"
    ],
    "skip": "0",
    "condition": {
      "path": "delivery_schedule_details",
      "operator": "not exists"
    },
    "actions": [
      {
        "description": "",
        "stage": "get_non_branch_delivery_schedule",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "delivery_schedule_details",
          "value": "",
          "valueFromField": "route_delivery_schedule",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Get the delivery days",
    "description": "",
    "stage": "get_delivery_days",
    "dependencies": [
      "get_branch_delivery_schedule",
      "get_non_branch_delivery_schedule"
    ],
    "skip": "0",
    "condition": {
      "path": "delivery_schedule_details",
      "operator": "exists"
    },
    "actions": [
      {
        "description": "",
        "stage": "get_delivery_days",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "delivery_schedule_details",
          "function": "get_from_object",
          "args": {
            "key": {
              "path": "delivery_schedule_key"
            }
          },
          "newField": "delivery_days",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Set default delivery day to tomorrow, if none is set.",
    "description": "",
    "stage": "set_default_delivery_day",
    "dependencies": [
      "get_delivery_days"
    ],
    "skip": "0",
    "condition": {
      "path": "delivery_days",
      "operator": "not exists"
    },
    "actions": [
      {
        "description": "",
        "stage": "set_default_delivery_day",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "delivery_days",
          "value": "day",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      }
    ]
  },
  {
    "rule": "Set promised delivery date and production date",
    "description": "",
    "stage": "set_promised_delivery_date",
    "dependencies": [
      "set_default_delivery_day"
    ],
    "skip": "0",
    "condition": {
      "path": "delivery_days",
      "operator": "exists"
    },
    "actions": [
      {
        "description": "",
        "stage": "get_delivery_days_list",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "delivery_days",
          "function": "transform",
          "args": {
            "transformer": "explode",
            "transformer_args": {
              "separator": "/"
            },
            "transformer_target_keys": []
          },
          "newField": "delivery_days_list",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "get_delivery_dates_list",
        "dependencies": [
          "get_delivery_days_list"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "delivery_days_list",
          "function": "transform",
          "args": {
            "transformer": "string_to_date_time",
            "transformer_args": {
              "format": "Y-m-d\\TH:i:s\\Z",
              "pre_modifier": "Next",
              "post_modifier": ""
            },
            "transformer_target_keys": []
          },
          "newField": "delivery_dates",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "get_promised_delivery_date",
        "dependencies": [
          "get_delivery_dates_list"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "delivery_dates",
          "function": "reducer",
          "args": {
            "reducer": "min"
          },
          "newField": "promised_delivery_date",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "set_current_date_time_string",
        "dependencies": [],
        "action": "set",
        "skip": "0",
        "params": {
          "path": "current_date_time_string",
          "value": "now",
          "valueFromField": "",
          "valueMapping": "",
          "conditionalValue": [],
          "newField": ""
        }
      },
      {
        "description": "",
        "stage": "set_current_date_time",
        "dependencies": [
          "set_current_date_time_string"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "current_date_time_string",
          "function": "date_format",
          "args": {
            "format": "Y-m-d\\TH:i:s\\Z"
          },
          "newField": "current_date_time",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "set_current_day",
        "dependencies": [
          "set_current_date_time"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "current_date_time",
          "function": "date_format",
          "args": {
            "format": "l"
          },
          "newField": "current_day",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "set_current_time",
        "dependencies": [
          "set_current_date_time"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "current_date_time",
          "function": "date_format",
          "args": {
            "format": "H:i:s"
          },
          "newField": "current_time",
          "strict": "0",
          "condition": ""
        }
      },
      {
        "description": "",
        "stage": "set_hours_to_delivery",
        "dependencies": [
          "set_current_date_time",
          "get_promised_delivery_date"
        ],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "promised_delivery_date",
          "function": "date_diff",
          "args": {
            "end_date": {
              "path": "current_date_time"
            },
            "period": "h"
          },
          "newField": "hours_to_delivery",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "If today is Sunday, all next day deliveries should go to Tuesday",
    "description": "",
    "stage": "set_sunday_orders_promised_delivery_date",
    "dependencies": [
      "set_current_day",
      "set_hours_to_delivery"
    ],
    "skip": "0",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "current_day",
          "operator": "==",
          "value": "Sunday"
        },
        {
          "path": "hours_to_delivery",
          "operator": "lte",
          "value": "24"
        }
      ]
    },
    "actions": [
      {
        "description": "We add 2 days to promised delivery date",
        "stage": "set_sunday_orders_promised_delivery_date",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "promised_delivery_date",
          "function": "date_add_subtract_days",
          "args": {
            "days": "2",
            "operator": "add",
            "format": "Y-m-d\\TH:i:s\\Z"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "If today is not Sunday but time is past 3pm EAT, all next day deliveries should be a day after",
    "description": "",
    "stage": "set_past3pm_orders_promised_delivery_date",
    "dependencies": [
      "set_current_day",
      "set_current_time",
      "set_hours_to_delivery"
    ],
    "skip": "1",
    "condition": {
      "operator": "AND",
      "conditions": [
        {
          "path": "current_day",
          "operator": "!=",
          "value": "Sunday"
        },
        {
          "path": "current_time",
          "operator": "gte",
          "value": "12:00:00"
        },
        {
          "path": "hours_to_delivery",
          "operator": "lte",
          "value": "24"
        }
      ]
    },
    "actions": [
      {
        "description": "We add 1 day to promised delivery date",
        "stage": "set_past3pm_orders_promised_delivery_date",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "promised_delivery_date",
          "function": "date_add_subtract_days",
          "args": {
            "days": "1",
            "operator": "add",
            "format": "Y-m-d\\TH:i:s\\Z"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Set the production date; a day before the promised delivery date",
    "description": "",
    "stage": "set_production_date",
    "dependencies": [
      "get_promised_delivery_date",
      "set_past3pm_orders_promised_delivery_date",
      "set_sunday_orders_promised_delivery_date"
    ],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "",
        "stage": "set_production_date",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "promised_delivery_date",
          "function": "date_add_subtract_days",
          "args": {
            "days": "1",
            "operator": "sub",
            "format": "Y-m-d\\TH:i:s\\Z"
          },
          "newField": "production_date",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Set the delivery day",
    "description": "",
    "stage": "set_promised_delivery_day",
    "dependencies": [
      "get_promised_delivery_date",
      "set_past3pm_orders_promised_delivery_date",
      "set_sunday_orders_promised_delivery_date"
    ],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "",
        "stage": "set_promised_delivery_day",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "promised_delivery_date",
          "function": "date_format",
          "args": {
            "format": "l"
          },
          "newField": "promised_delivery_day",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "If promised delivery day is Sunday, we make it Monday (ie add 1 day)",
    "description": "",
    "stage": "sunday_orders_set_promised_delivery_day",
    "dependencies": [
      "set_promised_delivery_day"
    ],
    "skip": "0",
    "condition": {
      "path": "promised_delivery_day",
      "operator": "==",
      "value": "Sunday"
    },
    "actions": [
      {
        "description": "We add 1 day to promised delivery date",
        "stage": "sunday_orders_set_promised_delivery_day",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "promised_delivery_date",
          "function": "date_add_subtract_days",
          "args": {
            "days": "1",
            "operator": "add",
            "format": "Y-m-d\\TH:i:s\\Z"
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Cleanshelf reformmat po number, maintaining the comma",
    "description": "",
    "stage": "cleanshelf_format_po_number",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name.meta_data.value",
      "operator": "contains",
      "value": "CLEANSHELF"
    },
    "actions": [
      {
        "description": "",
        "stage": "cleanshelf_format_po_number",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "purchase_order_number",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "-": ","
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Format PO number for Naivas",
    "description": "",
    "stage": "naivas_format_po_number",
    "dependencies": [
      "match_customer"
    ],
    "skip": "0",
    "condition": {
      "path": "customer_name.matched_value",
      "operator": "contains",
      "value": "NAIVAS"
    },
    "actions": [
      {
        "description": "Ensure all purchase orders end with a '-1'",
        "stage": "naivas_format_po_number",
        "dependencies": [],
        "action": "function",
        "skip": "0",
        "params": {
          "path": "purchase_order_number",
          "function": "transform",
          "args": {
            "transformer": "regex_mapper",
            "transformer_args": {
              "mappings": {
                "(\\w+)(-1)?": "$1"
              },
              "is_case_sensitive": "0"
            },
            "transformer_target_keys": []
          },
          "newField": "",
          "strict": "0",
          "condition": ""
        }
      }
    ]
  },
  {
    "rule": "Remove all unwanted fields",
    "description": "",
    "stage": "remove_unwanted_fields",
    "dependencies": [],
    "skip": "0",
    "condition": "always",
    "actions": [
      {
        "description": "",
        "stage": "remove_customers_list",
        "dependencies": [
          "match_customer"
        ],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "customers_list"
        }
      },
      {
        "description": "",
        "stage": "remove_all_products_list",
        "dependencies": [
          "match_products"
        ],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "all_products_list"
        }
      },
      {
        "description": "",
        "stage": "remove_products_list",
        "dependencies": [
          "match_products"
        ],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "products_list"
        }
      },
      {
        "description": "",
        "stage": "remove_product_sections",
        "dependencies": [
          "get_delivery_section_from_product_sections"
        ],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "product_sections"
        }
      },
      {
        "description": "",
        "stage": "remove_delivery_section",
        "dependencies": [
          "majid_get_contact_person_name",
          "majid_get_delivery_location",
          "non_majid_non_tdr_full_delivery_location_add_section"
        ],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "delivery_section"
        }
      },
      {
        "description": "",
        "stage": "remove_full_delivery_location",
        "dependencies": [
          "match_shipping_location"
        ],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "full_delivery_location"
        }
      },
      {
        "description": "",
        "stage": "remove_shipping_addresses_list",
        "dependencies": [
          "match_shipping_location"
        ],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "shipping_addresses_list"
        }
      },
      {
        "description": "",
        "stage": "remove_contacts_list",
        "dependencies": [
          "tdr_match_contact_person",
          "non_tdr_match_contact_person",
          "other_supermarkets_match_contact_person",
          "majid_match_contact_person"
        ],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "contacts_list"
        }
      },
      {
        "description": "",
        "stage": "remove_delivery_schedule",
        "dependencies": [],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "delivery_schedule"
        }
      },
      {
        "description": "",
        "stage": "remove_delivery_schedule_key",
        "dependencies": [
          "get_delivery_days"
        ],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "delivery_schedule_key"
        }
      },
      {
        "description": "",
        "stage": "remove_route_delivery_schedule",
        "dependencies": [],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "route_delivery_schedule"
        }
      },
      {
        "description": "",
        "stage": "remove_branch_delivery_schedule",
        "dependencies": [],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "branch_delivery_schedule"
        }
      },
      {
        "description": "",
        "stage": "remove_delivery_schedule_details",
        "dependencies": [],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "delivery_schedule_details"
        }
      },
      {
        "description": "",
        "stage": "remove_delivery_days",
        "dependencies": [],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "delivery_days"
        }
      },
      {
        "description": "",
        "stage": "remove_delivery_days_list",
        "dependencies": [],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "delivery_days_list"
        }
      },
      {
        "description": "",
        "stage": "remove_delivery_dates",
        "dependencies": [],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "delivery_dates"
        }
      },
      {
        "description": "",
        "stage": "remove_current_date_time_string",
        "dependencies": [],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "current_date_time_string"
        }
      },
      {
        "description": "",
        "stage": "remove_current_date_time",
        "dependencies": [],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "current_date_time"
        }
      },
      {
        "description": "",
        "stage": "remove_current_day",
        "dependencies": [],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "current_day"
        }
      },
      {
        "description": "",
        "stage": "remove_current_time",
        "dependencies": [],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "current_time"
        }
      },
      {
        "description": "",
        "stage": "remove_hours_to_delivery",
        "dependencies": [],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "hours_to_delivery"
        }
      },
      {
        "description": "",
        "stage": "remove_promised_delivery_day",
        "dependencies": [],
        "action": "remove_path",
        "skip": "0",
        "params": {
          "path": "promised_delivery_day"
        }
      }
    ]
  }
]
